<?xml version="1.0" encoding="utf-8"?>
<abapGit version="v1.0.0" serializer="LCL_OBJECT_SFPI" serializer_version="v1.0.0">
 <asx:abap version="1.0" xmlns:asx="http://www.sap.com/abapxml">
  <asx:values>
   <VERSION>1</VERSION>
   <TYPE/>
   <INTERFACE href="#o1"/>
   <INTERFACET>
    <FPINTERFACET>
     <NAME/>
     <STATE/>
     <LANGUAGE>E</LANGUAGE>
     <ID/>
     <TEXT>DD Notification Letter</TEXT>
    </FPINTERFACET>
   </INTERFACET>
  </asx:values>
  <asx:heap xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:abap="http://www.sap.com/abapxml/types/built-in" xmlns:cls="http://www.sap.com/abapxml/classes/global" xmlns:dic="http://www.sap.com/abapxml/types/dictionary">
   <cls:CL_FP_INTERFACE_DATA id="o1">
    <CL_FP_INTERFACE_DATA classVersion="1">
     <CODING href="#o5"/>
     <PARAMETERS href="#o4"/>
     <GLOBAL_DEFINITIONS href="#o3"/>
     <REFERENCE_FIELDS href="#o2"/>
     <XSD_DEFINITIONS/>
    </CL_FP_INTERFACE_DATA>
   </cls:CL_FP_INTERFACE_DATA>
   <cls:CL_FP_REFERENCE_FIELDS id="o2">
    <CL_FP_INTERFACE_DATA_CHANGED classVersion="1">
     <INTERFACE_DATA href="#o1"/>
    </CL_FP_INTERFACE_DATA_CHANGED>
    <CL_FP_REFERENCE_FIELDS classVersion="1">
     <REFERENCE_FIELDS/>
    </CL_FP_REFERENCE_FIELDS>
   </cls:CL_FP_REFERENCE_FIELDS>
   <cls:CL_FP_GLOBAL_DEFINITIONS id="o3">
    <CL_FP_INTERFACE_DATA_CHANGED classVersion="1">
     <INTERFACE_DATA href="#o1"/>
    </CL_FP_INTERFACE_DATA_CHANGED>
    <CL_FP_GLOBAL_DEFINITIONS classVersion="1">
     <GLOBAL_DATA>
      <SFPGDATA>
       <NAME>GV_LOGO_BIN</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>XSTRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_LANGU</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>SYLANGU</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FORM_NAME</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_COMP_NAME</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>X_COMP_ADDR</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>TY_ADDRESS</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_KUNNR</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>KUNNR</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_PAYMENT_DATE</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>CHAR10</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_EMAIL_CONT</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_CUST_NAME</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>NAME1_GP</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_CUST_ADRNR</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>AD_ADDRNUM</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_IBAN</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>DZIBAN</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_MANDATE</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>SEPA_MNDID</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GT_MESSAGE_TEXT</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>SRM_T_SOLISTI1</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GT_DISPLAY</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>TT_DISPLAY</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FAX</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>AD_FXNRLNG</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_EMAIL_COMM</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>AD_SMTPADR</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>C_BMP</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL>&apos;images/bmp&apos;</DEFAULTVAL>
       <CONSTANT>X</CONSTANT>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_CUST_COUNTRY</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>LAND1</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GT_FOOTER_DETAILS</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>SRM_T_SOLISTI1</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_EMAIL_LABEL</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FAX_LABEL</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TOTAL</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>CHAR15</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_CONTACT_LABEL</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TEXT1</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TEXT2</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TEXT3</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TEXT4</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TEXT5</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FOOTER1</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FOOTER2</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FOOTER3</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FOOTER4</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_FOOTER5</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_COUNTRY_NAME</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>X_REGUH</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>TY_REGUH</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>I_REGUP</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>TY_T_REGUP</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_IMAGE_BIN</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>XSTRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_SPRAS</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>SPRAS</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_DD</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_INVOICE</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_PO</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_INVDATE</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_DISC</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_CURR</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_GRAMT</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_PAGE_NO</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_PAY_DATE</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TODATE</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>CHAR20</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_IDENTIFIER</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>SEPA_CRDID</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_LABEL_IDENTIFIER</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_CURRENCY</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>WAERS</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
      <SFPGDATA>
       <NAME>GV_TEXT6</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>STRING</TYPENAME>
       <DEFAULTVAL/>
       <CONSTANT/>
      </SFPGDATA>
     </GLOBAL_DATA>
     <TYPES>
      <FPCLINE>************************************************************************</FPCLINE>
      <FPCLINE>* Interface  : ZOTC0101_DD_NOTIF_LETTER                                *</FPCLINE>
      <FPCLINE>* Title      : DD Notification letter                                  *</FPCLINE>
      <FPCLINE>* Developer  : Sayantan Mukherjee                                      *</FPCLINE>
      <FPCLINE>* Object Type: Form Interface                                          *</FPCLINE>
      <FPCLINE>* SAP Release: SAP ECC 6.0                                             *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* WRICEF ID  : OTC_FDD_0101_DD Notification letter                     *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Description:We have direct debit collection set up with customer for *</FPCLINE>
      <FPCLINE>* multiple European countries.(France, Spain &amp; Germany) Since direct   *</FPCLINE>
      <FPCLINE>* debit is standing instruction of debiting customer’s account on value*</FPCLINE>
      <FPCLINE>* date automatically for due open items, business wants to send a      *</FPCLINE>
      <FPCLINE>*notification with details of invoices to be collected.                *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Modification History:                                                *</FPCLINE>
      <FPCLINE>*======================================================================*</FPCLINE>
      <FPCLINE>* Date        User      Transport  Description                         *</FPCLINE>
      <FPCLINE>* =========== ========  ========== ====================================*</FPCLINE>
      <FPCLINE>* 31-OCT-2018 SMUKHER4  E1DK939327 SCTASK0754492:Initial development   *</FPCLINE>
      <FPCLINE>*======================================================================*</FPCLINE>
      <FPCLINE/>
      <FPCLINE>TYPES: BEGIN OF ty_address,</FPCLINE>
      <FPCLINE>      line1 TYPE lines,       &quot; Address line</FPCLINE>
      <FPCLINE>      line2 TYPE lines,       &quot; Address line</FPCLINE>
      <FPCLINE>      line3 TYPE lines,       &quot; Address line</FPCLINE>
      <FPCLINE>      line4 TYPE lines,       &quot; Address line</FPCLINE>
      <FPCLINE>      line5 TYPE lines,       &quot; Address line</FPCLINE>
      <FPCLINE>      line6 TYPE lines,       &quot; Address line</FPCLINE>
      <FPCLINE>      END OF ty_address,</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      BEGIN OF ty_display,</FPCLINE>
      <FPCLINE>      invoice   TYPE belnr_d, &quot; Accounting Document Number</FPCLINE>
      <FPCLINE>      po_num    TYPE xblnr1,  &quot; Reference Document Number</FPCLINE>
      <FPCLINE>      inv_date  TYPE char10,  &quot; Document Date in Document</FPCLINE>
      <FPCLINE>      cash_disc TYPE char15,  &quot; Cash Discount Amount in Local Currency</FPCLINE>
      <FPCLINE>      currency  TYPE waers,   &quot; Currency Key</FPCLINE>
      <FPCLINE>      gross_amt TYPE char15,  &quot; Amount in Document Currency</FPCLINE>
      <FPCLINE>      END OF ty_display,</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    BEGIN OF ty_standard_text,</FPCLINE>
      <FPCLINE>    tdobject TYPE tdobject,   &quot; Texts: Application Object</FPCLINE>
      <FPCLINE>    tdname   TYPE tdobname,   &quot; Name</FPCLINE>
      <FPCLINE>    tdid     TYPE tdid,       &quot; Text ID</FPCLINE>
      <FPCLINE>    END OF ty_standard_text,</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    BEGIN OF ty_reguh,</FPCLINE>
      <FPCLINE>    laufd TYPE laufd,         &quot; Date on Which the Program Is to Be Run</FPCLINE>
      <FPCLINE>    laufi TYPE laufi,         &quot; Additional Identification</FPCLINE>
      <FPCLINE>    xvorl TYPE xvorl,         &quot; Indicator: Only Proposal Run?</FPCLINE>
      <FPCLINE>    zbukr TYPE dzbukr,        &quot; Paying company code</FPCLINE>
      <FPCLINE>    kunnr TYPE kunnr,         &quot; Customer Number</FPCLINE>
      <FPCLINE>    waers TYPE waers,         &quot; Currency Key</FPCLINE>
      <FPCLINE>    name1 TYPE name1_gp,      &quot; Name 1</FPCLINE>
      <FPCLINE>    land1 TYPE land1,         &quot; Country Key</FPCLINE>
      <FPCLINE>    adrnr TYPE ad_addrnum,    &quot; Address number</FPCLINE>
      <FPCLINE>    ziban TYPE dziban,        &quot; IBAN of the Payee</FPCLINE>
      <FPCLINE>    mguid TYPE sepa_mguid,    &quot; SEPA Mandate: GUID of Mandate</FPCLINE>
      <FPCLINE>    END OF ty_reguh,</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    BEGIN OF ty_regup,</FPCLINE>
      <FPCLINE>    laufd TYPE laufd,         &quot; Date on Which the Program Is to Be Run</FPCLINE>
      <FPCLINE>    laufi TYPE laufi,         &quot; Additional Identification</FPCLINE>
      <FPCLINE>    xvorl TYPE xvorl,         &quot; Indicator: Only Proposal Run?</FPCLINE>
      <FPCLINE>    belnr TYPE belnr_d,       &quot; Accounting Document Number</FPCLINE>
      <FPCLINE>    xblnr TYPE xblnr1,        &quot; Reference Document Number</FPCLINE>
      <FPCLINE>    waers TYPE waers,         &quot; Currency Key</FPCLINE>
      <FPCLINE>    bldat TYPE bldat,         &quot; Document Date in Document</FPCLINE>
      <FPCLINE>    shkzg TYPE shkzg,</FPCLINE>
      <FPCLINE>    wrbtr TYPE wrbtr,         &quot; Amount in Document Currency</FPCLINE>
      <FPCLINE>    sknto TYPE sknto,         &quot; Cash Discount Amount in Local Currency</FPCLINE>
      <FPCLINE>    END OF ty_regup,</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>      ty_t_standard_text TYPE STANDARD TABLE OF ty_standard_text,</FPCLINE>
      <FPCLINE>      ty_t_regup TYPE STANDARD TABLE OF ty_regup,</FPCLINE>
      <FPCLINE>      tt_display TYPE STANDARD TABLE OF ty_display.</FPCLINE>
     </TYPES>
     <FIELDSYMBOLS/>
    </CL_FP_GLOBAL_DEFINITIONS>
   </cls:CL_FP_GLOBAL_DEFINITIONS>
   <cls:CL_FP_PARAMETERS id="o4">
    <CL_FP_INTERFACE_DATA_CHANGED classVersion="1">
     <INTERFACE_DATA href="#o1"/>
    </CL_FP_INTERFACE_DATA_CHANGED>
    <CL_FP_PARAMETERS classVersion="1">
     <IMPORT_PARAMETERS>
      <SFPIOPAR>
       <NAME>IS_FPAYH</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>FPAYH</TYPENAME>
       <OPTIONAL/>
       <BYVALUE/>
       <DEFAULTVAL/>
       <STANDARD/>
       <CONSTANT/>
      </SFPIOPAR>
      <SFPIOPAR>
       <NAME>IS_FPAYHX</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>FPAYHX</TYPENAME>
       <OPTIONAL/>
       <BYVALUE/>
       <DEFAULTVAL/>
       <STANDARD/>
       <CONSTANT/>
      </SFPIOPAR>
      <SFPIOPAR>
       <NAME>IS_SPELL</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>SPELL</TYPENAME>
       <OPTIONAL/>
       <BYVALUE/>
       <DEFAULTVAL/>
       <STANDARD/>
       <CONSTANT/>
      </SFPIOPAR>
      <SFPIOPAR>
       <NAME>IS_CPD_ADDRESS</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>ADRS_PRINT</TYPENAME>
       <OPTIONAL/>
       <BYVALUE/>
       <DEFAULTVAL/>
       <STANDARD/>
       <CONSTANT/>
      </SFPIOPAR>
      <SFPIOPAR>
       <NAME>IT_PAYMETHOD_TEXT</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>TY_TLINE</TYPENAME>
       <OPTIONAL/>
       <BYVALUE/>
       <DEFAULTVAL/>
       <STANDARD/>
       <CONSTANT/>
      </SFPIOPAR>
      <SFPIOPAR>
       <NAME>IT_FPAYP</NAME>
       <TYPING>TYPE</TYPING>
       <TYPENAME>FPM_T_FPAYP</TYPENAME>
       <OPTIONAL/>
       <BYVALUE/>
       <DEFAULTVAL/>
       <STANDARD/>
       <CONSTANT/>
      </SFPIOPAR>
     </IMPORT_PARAMETERS>
     <EXPORT_PARAMETERS/>
     <TABLE_PARAMETERS/>
     <EXCEPTIONS/>
    </CL_FP_PARAMETERS>
   </cls:CL_FP_PARAMETERS>
   <cls:CL_FP_CODING id="o5">
    <CL_FP_INTERFACE_DATA_CHANGED classVersion="1">
     <INTERFACE_DATA href="#o1"/>
    </CL_FP_INTERFACE_DATA_CHANGED>
    <CL_FP_CODING classVersion="1">
     <INPUT_PARAMETERS>
      <FPPARAMETER>IS_FPAYH</FPPARAMETER>
     </INPUT_PARAMETERS>
     <OUTPUT_PARAMETERS>
      <FPPARAMETER>GT_FOOTER_DETAILS</FPPARAMETER>
      <FPPARAMETER>GV_CUST_COUNTRY</FPPARAMETER>
      <FPPARAMETER>C_BMP</FPPARAMETER>
      <FPPARAMETER>GV_EMAIL_COMM</FPPARAMETER>
      <FPPARAMETER>GV_FAX</FPPARAMETER>
      <FPPARAMETER>GT_DISPLAY</FPPARAMETER>
      <FPPARAMETER>GT_MESSAGE_TEXT</FPPARAMETER>
      <FPPARAMETER>GV_MANDATE</FPPARAMETER>
      <FPPARAMETER>GV_IBAN</FPPARAMETER>
      <FPPARAMETER>GV_CUST_ADRNR</FPPARAMETER>
      <FPPARAMETER>GV_CUST_NAME</FPPARAMETER>
      <FPPARAMETER>GV_EMAIL_CONT</FPPARAMETER>
      <FPPARAMETER>GV_PAYMENT_DATE</FPPARAMETER>
      <FPPARAMETER>GV_KUNNR</FPPARAMETER>
      <FPPARAMETER>X_COMP_ADDR</FPPARAMETER>
      <FPPARAMETER>GV_COMP_NAME</FPPARAMETER>
      <FPPARAMETER>GV_FORM_NAME</FPPARAMETER>
      <FPPARAMETER>GV_LANGU</FPPARAMETER>
      <FPPARAMETER>GV_CONTACT_LABEL</FPPARAMETER>
      <FPPARAMETER>GV_LOGO_BIN</FPPARAMETER>
     </OUTPUT_PARAMETERS>
     <INITIALIZATION>
      <FPCLINE>************************************************************************</FPCLINE>
      <FPCLINE>* Interface  : ZOTC0101_DD_NOTIF_LETTER                                *</FPCLINE>
      <FPCLINE>* Title      : DD Notification letter                                  *</FPCLINE>
      <FPCLINE>* Developer  : Sayantan Mukherjee                                      *</FPCLINE>
      <FPCLINE>* Object Type: Form Interface                                          *</FPCLINE>
      <FPCLINE>* SAP Release: SAP ECC 6.0                                             *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* WRICEF ID  : OTC_FDD_0101_DD Notification letter                     *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Description:We have direct debit collection set up with customer for *</FPCLINE>
      <FPCLINE>* multiple European countries.(France, Spain &amp; Germany) Since direct   *</FPCLINE>
      <FPCLINE>* debit is standing instruction of debiting customer’s account on value*</FPCLINE>
      <FPCLINE>* date automatically for due open items, business wants to send a      *</FPCLINE>
      <FPCLINE>*notification with details of invoices to be collected.                *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Modification History:                                                *</FPCLINE>
      <FPCLINE>*======================================================================*</FPCLINE>
      <FPCLINE>* Date        User      Transport  Description                         *</FPCLINE>
      <FPCLINE>* =========== ========  ========== ====================================*</FPCLINE>
      <FPCLINE>* 31-OCT-2018 SMUKHER4  E1DK939327 SCTASK0754492:Initial development   *</FPCLINE>
      <FPCLINE>*======================================================================*</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--&gt;Determine form language.</FPCLINE>
      <FPCLINE>CLEAR gv_langu.</FPCLINE>
      <FPCLINE>gv_langu = /1bcdwb/docparams-langu.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get payment related data.</FPCLINE>
      <FPCLINE>PERFORM f_fetch_data USING    is_fpayh</FPCLINE>
      <FPCLINE>                     CHANGING x_reguh</FPCLINE>
      <FPCLINE>                              i_regup[].</FPCLINE>
      <FPCLINE>*&amp;--For Biorad Logo</FPCLINE>
      <FPCLINE>PERFORM f_logo_image USING    x_reguh</FPCLINE>
      <FPCLINE>                     CHANGING gv_image_bin</FPCLINE>
      <FPCLINE>                              gv_logo_bin.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--fetching customer maintained language</FPCLINE>
      <FPCLINE>PERFORM f_fetch_cust_lang  USING    x_reguh</FPCLINE>
      <FPCLINE>                           CHANGING gv_spras.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get Form name</FPCLINE>
      <FPCLINE>PERFORM f_get_form_name USING   gv_spras</FPCLINE>
      <FPCLINE>                       CHANGING gv_form_name.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get Communication method</FPCLINE>
      <FPCLINE>PERFORM f_get_comm_method USING    x_reguh</FPCLINE>
      <FPCLINE>                          CHANGING gv_fax</FPCLINE>
      <FPCLINE>                                   gv_email_comm</FPCLINE>
      <FPCLINE>                                   gv_email_label</FPCLINE>
      <FPCLINE>                                   gv_fax_label.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get Company name</FPCLINE>
      <FPCLINE>PERFORM f_get_company_name USING    x_reguh</FPCLINE>
      <FPCLINE>                           CHANGING gv_comp_name</FPCLINE>
      <FPCLINE>                                    x_comp_addr.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get Customer Number</FPCLINE>
      <FPCLINE>PERFORM f_get_customer_number USING    x_reguh</FPCLINE>
      <FPCLINE>                              CHANGING gv_kunnr.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get payment date</FPCLINE>
      <FPCLINE>PERFORM f_payment_date USING    x_reguh</FPCLINE>
      <FPCLINE>                       CHANGING gv_payment_date.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get today&apos;s date</FPCLINE>
      <FPCLINE>PERFORM f_today_date USING    gv_spras</FPCLINE>
      <FPCLINE>                     CHANGING gv_todate.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch Contact email details.</FPCLINE>
      <FPCLINE>PERFORM f_fetch_email USING    x_reguh</FPCLINE>
      <FPCLINE>                      CHANGING gv_email_cont</FPCLINE>
      <FPCLINE>                               gv_contact_label.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch Credit Identifier.</FPCLINE>
      <FPCLINE>PERFORM f_credit_identifier USING    x_reguh</FPCLINE>
      <FPCLINE>                                     gv_spras</FPCLINE>
      <FPCLINE>                            CHANGING gv_identifier</FPCLINE>
      <FPCLINE>                                     gv_label_identifier.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--&gt;Begin of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE>*&amp;--Customer name is coming as duplicate, already coming in customer address.</FPCLINE>
      <FPCLINE>*&amp;--Get customer name</FPCLINE>
      <FPCLINE>*PERFORM f_customer_name USING    x_reguh</FPCLINE>
      <FPCLINE>*                        CHANGING gv_cust_name.</FPCLINE>
      <FPCLINE>*&amp;&lt;--End of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get Customer Address</FPCLINE>
      <FPCLINE>PERFORM f_customer_addr USING    x_reguh</FPCLINE>
      <FPCLINE>                        CHANGING gv_cust_adrnr</FPCLINE>
      <FPCLINE>                                 gv_cust_country</FPCLINE>
      <FPCLINE>                                 gv_country_name.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>* Decimal formatting as per the country</FPCLINE>
      <FPCLINE>SET COUNTRY gv_cust_country.</FPCLINE>
      <FPCLINE>gv_currency = x_reguh-waers.</FPCLINE>
      <FPCLINE>*&amp;--Populate IBAN code</FPCLINE>
      <FPCLINE>PERFORM f_populate_iban USING    x_reguh</FPCLINE>
      <FPCLINE>                        CHANGING gv_iban.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Populate SEPA mandate</FPCLINE>
      <FPCLINE>PERFORM f_populate_sepa USING    x_reguh</FPCLINE>
      <FPCLINE>                        CHANGING gv_mandate.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Populate Standard Text</FPCLINE>
      <FPCLINE>PERFORM f_populate_stand_text USING gv_iban</FPCLINE>
      <FPCLINE>                                    x_reguh</FPCLINE>
      <FPCLINE>                                    gv_mandate</FPCLINE>
      <FPCLINE>                              CHANGING gt_message_text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch item label standard text.</FPCLINE>
      <FPCLINE>PERFORM f_populate_item_text USING    gv_spras</FPCLINE>
      <FPCLINE>                             CHANGING gv_invoice</FPCLINE>
      <FPCLINE>                                      gv_po</FPCLINE>
      <FPCLINE>                                      gv_invdate</FPCLINE>
      <FPCLINE>                                      gv_disc</FPCLINE>
      <FPCLINE>                                      gv_curr</FPCLINE>
      <FPCLINE>                                      gv_gramt</FPCLINE>
      <FPCLINE>                                      gv_dd</FPCLINE>
      <FPCLINE>                                      gv_page_no</FPCLINE>
      <FPCLINE>                                      gv_pay_date.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Prepare final item table</FPCLINE>
      <FPCLINE>PERFORM f_populate_item  USING    i_regup</FPCLINE>
      <FPCLINE>                         CHANGING gt_display.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Populate Footer details</FPCLINE>
      <FPCLINE>PERFORM f_populate_footer USING x_reguh</FPCLINE>
      <FPCLINE>                          CHANGING gt_footer_details.</FPCLINE>
     </INITIALIZATION>
     <FORMS>
      <FPCLINE/>
      <FPCLINE>************************************************************************</FPCLINE>
      <FPCLINE>* Interface  : ZOTC0101_DD_NOTIF_LETTER                                *</FPCLINE>
      <FPCLINE>* Title      : DD Notification letter                                  *</FPCLINE>
      <FPCLINE>* Developer  : Sayantan Mukherjee                                      *</FPCLINE>
      <FPCLINE>* Object Type: Form Interface                                          *</FPCLINE>
      <FPCLINE>* SAP Release: SAP ECC 6.0                                             *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* WRICEF ID  : OTC_FDD_0101_DD Notification letter                     *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Description:We have direct debit collection set up with customer for *</FPCLINE>
      <FPCLINE>* multiple European countries.(France, Spain &amp; Germany) Since direct   *</FPCLINE>
      <FPCLINE>* debit is standing instruction of debiting customer’s account on value*</FPCLINE>
      <FPCLINE>* date automatically for due open items, business wants to send a      *</FPCLINE>
      <FPCLINE>*notification with details of invoices to be collected.                *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Modification History:                                                *</FPCLINE>
      <FPCLINE>*======================================================================*</FPCLINE>
      <FPCLINE>* Date        User      Transport  Description                         *</FPCLINE>
      <FPCLINE>* =========== ========  ========== ====================================*</FPCLINE>
      <FPCLINE>* 31-OCT-2018 SMUKHER4  E1DK939327 SCTASK0754492:Initial development   *</FPCLINE>
      <FPCLINE>*======================================================================*</FPCLINE>
      <FPCLINE>* 03-FEB-2019 ASK  E1DK940384 Defect 8280 : DRAFT image control        *</FPCLINE>
      <FPCLINE>*======================================================================*</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>*&amp;      Form  f_logo_image</FPCLINE>
      <FPCLINE>*&amp;----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*       For Logo and Watermark</FPCLINE>
      <FPCLINE>*    ---&gt;  FP_REGUH       Settlement data from payment program</FPCLINE>
      <FPCLINE>*    &lt;---  FP_IMAGE_BIN   Draft</FPCLINE>
      <FPCLINE>*    &lt;---  FP_LOGO_BIN    Logo</FPCLINE>
      <FPCLINE>*-----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE/>
      <FPCLINE>FORM f_logo_image USING    fp_reguh     TYPE ty_reguh &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                  CHANGING fp_image_bin TYPE xstring  &quot;Draft image</FPCLINE>
      <FPCLINE>                           fp_logo_bin  TYPE xstring. &quot;Logo image</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CONSTANTS:</FPCLINE>
      <FPCLINE>*&amp;--Company code for German 2032</FPCLINE>
      <FPCLINE>     lc_2032        TYPE dzbukr     VALUE &apos;2032&apos;, &quot; Paying company code</FPCLINE>
      <FPCLINE>*&amp;--SAPscript Graphics Management: Application object</FPCLINE>
      <FPCLINE>     lc_graphics    TYPE tdobjectgr VALUE &apos;GRAPHICS&apos;, &quot; SAPscript Graphics Management: Application object</FPCLINE>
      <FPCLINE>*&amp;--Logo Name</FPCLINE>
      <FPCLINE>     lc_logo_image  TYPE tdobname   VALUE &apos;ZBIORAD_LOGO&apos;, &quot; Name</FPCLINE>
      <FPCLINE>*&amp;--Diamed logo</FPCLINE>
      <FPCLINE>     lc_logo_dia    TYPE tdobname   VALUE &apos;ZDIAMED&apos;, &quot; Name</FPCLINE>
      <FPCLINE>*&amp;--Draft Name</FPCLINE>
      <FPCLINE>     lc_draft_image TYPE tdobname   VALUE &apos;ZOTC_DRAFT&apos;, &quot; Name</FPCLINE>
      <FPCLINE>     lc_prod_name   type rvari_vnam value &apos;ZPRODUCTION&apos;,     &quot; Defect 8280</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--SAPscript Graphics Management: ID</FPCLINE>
      <FPCLINE>     lc_image_id    TYPE tdidgr     VALUE &apos;BMAP&apos;, &quot; SAPscript Graphics Management: ID</FPCLINE>
      <FPCLINE>*&amp;--SAPscript: Type of graphic</FPCLINE>
      <FPCLINE>     lc_image_type  TYPE tdbtype    VALUE &apos;BCOL&apos;.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>* Begin of Defect 8280</FPCLINE>
      <FPCLINE/>
      <FPCLINE>DATA : lv_prod        type sysysid.                &quot; Name of the SAP System</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Check Production Client</FPCLINE>
      <FPCLINE>select low    &quot; ABAP/4: Selection value (LOW or HIGH value, external format)</FPCLINE>
      <FPCLINE>  from tvarvc &quot; Table of Variant Variables (Client-Specific)</FPCLINE>
      <FPCLINE>    up to 1 rows</FPCLINE>
      <FPCLINE>  into lv_prod</FPCLINE>
      <FPCLINE> where name = lc_prod_name.</FPCLINE>
      <FPCLINE>endselect .</FPCLINE>
      <FPCLINE/>
      <FPCLINE>if sy-sysid NE lv_prod.</FPCLINE>
      <FPCLINE>*End of &quot; Defect 8280</FPCLINE>
      <FPCLINE>**&amp;For water mark image</FPCLINE>
      <FPCLINE>  CALL METHOD cl_ssf_xsf_utilities=&gt;get_bds_graphic_as_bmp</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      p_object       = lc_graphics</FPCLINE>
      <FPCLINE>      p_name         = lc_draft_image</FPCLINE>
      <FPCLINE>      p_id           = lc_image_id</FPCLINE>
      <FPCLINE>      p_btype        = lc_image_type</FPCLINE>
      <FPCLINE>    RECEIVING</FPCLINE>
      <FPCLINE>      p_bmp          = fp_image_bin</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      not_found      = 1</FPCLINE>
      <FPCLINE>      internal_error = 2</FPCLINE>
      <FPCLINE>      OTHERS         = 3.</FPCLINE>
      <FPCLINE>  IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno</FPCLINE>
      <FPCLINE>               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE>ENDIF.  &quot; Defect 8280</FPCLINE>
      <FPCLINE>*&amp;--Diamed Logo will only print for company code 2032 German</FPCLINE>
      <FPCLINE>  IF fp_reguh-zbukr NE lc_2032.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Convert Logo image to Binary format</FPCLINE>
      <FPCLINE>    CALL METHOD cl_ssf_xsf_utilities=&gt;get_bds_graphic_as_bmp</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        p_object       = lc_graphics</FPCLINE>
      <FPCLINE>        p_name         = lc_logo_image</FPCLINE>
      <FPCLINE>        p_id           = lc_image_id</FPCLINE>
      <FPCLINE>        p_btype        = lc_image_type</FPCLINE>
      <FPCLINE>      RECEIVING</FPCLINE>
      <FPCLINE>        p_bmp          = fp_logo_bin</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        not_found      = 1</FPCLINE>
      <FPCLINE>        internal_error = 2</FPCLINE>
      <FPCLINE>        OTHERS         = 3.</FPCLINE>
      <FPCLINE>    IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno</FPCLINE>
      <FPCLINE>                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF fp_reguh-zbukr NE lc_2032</FPCLINE>
      <FPCLINE>*&amp;--For Diamed logo only for company code 2032.</FPCLINE>
      <FPCLINE>*&amp;--Convert Logo image to Binary format</FPCLINE>
      <FPCLINE>    CALL METHOD cl_ssf_xsf_utilities=&gt;get_bds_graphic_as_bmp</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        p_object       = lc_graphics</FPCLINE>
      <FPCLINE>        p_name         = lc_logo_dia</FPCLINE>
      <FPCLINE>        p_id           = lc_image_id</FPCLINE>
      <FPCLINE>        p_btype        = lc_image_type</FPCLINE>
      <FPCLINE>      RECEIVING</FPCLINE>
      <FPCLINE>        p_bmp          = fp_logo_bin</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        not_found      = 1</FPCLINE>
      <FPCLINE>        internal_error = 2</FPCLINE>
      <FPCLINE>        OTHERS         = 3.</FPCLINE>
      <FPCLINE>    IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno</FPCLINE>
      <FPCLINE>                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF fp_reguh-zbukr NE lc_2032</FPCLINE>
      <FPCLINE>ENDFORM. &quot;f_logo_image</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_get_form_name</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Form Name</FPCLINE>
      <FPCLINE>*  ---&gt; FP_SPRAS  LAnguage Key</FPCLINE>
      <FPCLINE>*  &lt;-- FP_FORM_NAME Label</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_get_form_name USING    fp_spras     TYPE spras &quot; Language Key</FPCLINE>
      <FPCLINE>                     CHANGING fp_form_name TYPE string.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Data Declarations</FPCLINE>
      <FPCLINE>  DATA: li_lines        TYPE STANDARD TABLE OF tline INITIAL SIZE 0, &quot;SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        lwa_lines       TYPE tline,                                  &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        lv_form_name    TYPE tdobname.                               &quot; Name</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Constants</FPCLINE>
      <FPCLINE>  CONSTANTS: lc_form_name TYPE tdobname VALUE &apos;ZOTC0101_FORM_NAME&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_id        TYPE tdid     VALUE &apos;ST&apos;,                 &quot; Material-sales text</FPCLINE>
      <FPCLINE>             lc_object    TYPE tdobject VALUE &apos;TEXT&apos;,               &quot; Order item text</FPCLINE>
      <FPCLINE>             lc_english   TYPE spras    VALUE &apos;E&apos;.                  &quot; Language Key</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--First Check the Customer maintained language,if not fall back would be on English</FPCLINE>
      <FPCLINE>*&amp;--Call Function module to fetch the label form name.</FPCLINE>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_form_name</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_form_name = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_form_name</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_form_name = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>ENDFORM. &quot;f_get_form_name</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_get_company_name</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*  Company Name &amp; Address</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    --&gt;FP_REGUH  Settlement data from payment program                 *</FPCLINE>
      <FPCLINE>*    &lt;--FP_COMP_NAME   Company name</FPCLINE>
      <FPCLINE>*    &lt;-- FP_COMP_ADDR  Comapny Address</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_get_company_name USING fp_reguh TYPE ty_reguh           &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                        CHANGING fp_comp_name TYPE string      &quot;Company name</FPCLINE>
      <FPCLINE>                                 fp_comp_addr TYPE ty_address. &quot;Comapny Address</FPCLINE>
      <FPCLINE>*&amp;--Local data Declarations</FPCLINE>
      <FPCLINE>  DATA: lv_name      TYPE ort01,                    &quot; City</FPCLINE>
      <FPCLINE>        li_address   TYPE STANDARD TABLE OF szadr_printform_table_line,</FPCLINE>
      <FPCLINE>        lwa_address  TYPE fsbp_address_printf_line, &quot; Print Form Row</FPCLINE>
      <FPCLINE>        lv_adrnr     TYPE adrnr.                    &quot; Address</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--local constants</FPCLINE>
      <FPCLINE>  CONSTANTS: lc_6            TYPE anzei          VALUE &apos;6&apos;, &quot; Number of lines in address</FPCLINE>
      <FPCLINE>             lc_1            TYPE ad_adrtype     VALUE &apos;1&apos;. &quot; Address type (1=Organization, 2=Person, 3=Contact person)</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch records from T001 table</FPCLINE>
      <FPCLINE>  SELECT SINGLE ort01 adrnr FROM t001 INTO (lv_name , lv_adrnr)</FPCLINE>
      <FPCLINE>               WHERE  bukrs = fp_reguh-zbukr.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;&gt;&gt; Get the company name</FPCLINE>
      <FPCLINE>*&amp;--&gt;Begin of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE>*    fp_comp_name = lv_name.</FPCLINE>
      <FPCLINE>*&amp;&lt;--End of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get the company address</FPCLINE>
      <FPCLINE>******Address Format According to Post Office Guidelines</FPCLINE>
      <FPCLINE>  CALL FUNCTION &apos;ADDRESS_INTO_PRINTFORM&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      address_type                   = lc_1</FPCLINE>
      <FPCLINE>      address_number                 = lv_adrnr</FPCLINE>
      <FPCLINE>      receiver_language              = gv_langu</FPCLINE>
      <FPCLINE>      number_of_lines                = lc_6</FPCLINE>
      <FPCLINE>      country_name_in_receiver_langu = abap_true</FPCLINE>
      <FPCLINE>      no_upper_case_for_city         = abap_true</FPCLINE>
      <FPCLINE>      iv_country_name_separate_line  = abap_true</FPCLINE>
      <FPCLINE>    IMPORTING</FPCLINE>
      <FPCLINE>      address_printform_table        = li_address.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*--Populating the company&apos;s address</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  LOOP AT li_address INTO lwa_address.</FPCLINE>
      <FPCLINE>    CASE sy-tabix.</FPCLINE>
      <FPCLINE>*&amp;--&gt;Begin of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE>*&amp;--As per the business requirement, first line is not required.</FPCLINE>
      <FPCLINE>*      WHEN 1.</FPCLINE>
      <FPCLINE>*        fp_comp_addr-line1 = lwa_address-address_line.</FPCLINE>
      <FPCLINE>*&amp;&lt;--End of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE>      WHEN 2.</FPCLINE>
      <FPCLINE>        fp_comp_addr-line2 = lwa_address-address_line.</FPCLINE>
      <FPCLINE>      WHEN 3.</FPCLINE>
      <FPCLINE>        fp_comp_addr-line3 = lwa_address-address_line.</FPCLINE>
      <FPCLINE>      WHEN 4.</FPCLINE>
      <FPCLINE>        fp_comp_addr-line4 = lwa_address-address_line.</FPCLINE>
      <FPCLINE>      WHEN 5.</FPCLINE>
      <FPCLINE>        fp_comp_addr-line5 = lwa_address-address_line.</FPCLINE>
      <FPCLINE>      WHEN 6.</FPCLINE>
      <FPCLINE>        fp_comp_addr-line6 = lwa_address-address_line.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDCASE.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDLOOP. &quot; LOOP AT li_address INTO lwa_address</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_get_company_name</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_get_customer_number</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Get Customer Number</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    --&gt;FP_REGUH   Settlement data from payment program</FPCLINE>
      <FPCLINE>*    &lt;--FP_KUNNR   Customer Number</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_get_customer_number USING    fp_reguh TYPE ty_reguh &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                           CHANGING fp_kunnr TYPE kunnr.   &quot; Customer Number</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--get the customer number</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  fp_kunnr = fp_reguh-kunnr.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_get_customer_number</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_payment_date</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    Get Payment Date</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    --&gt;FP_REGUH        Settlement data from payment program                *</FPCLINE>
      <FPCLINE>*    &lt;--FP_PAYMENT_DATE Payment date</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_payment_date USING    fp_reguh        TYPE ty_reguh &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                    CHANGING fp_payment_date TYPE char10.  &quot;Payment date</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  DATA: lv_sep     TYPE char1,   &quot; Sep of type CHAR1</FPCLINE>
      <FPCLINE>        lv_xudatfm TYPE xudatfm, &quot; Date format</FPCLINE>
      <FPCLINE>        lv_year    TYPE char4,   &quot; Year of type CHAR4</FPCLINE>
      <FPCLINE>        lv_month   TYPE char2,   &quot; Month of type CHAR2</FPCLINE>
      <FPCLINE>        lv_days    TYPE char2.   &quot; Days of type CHAR2</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get payment date</FPCLINE>
      <FPCLINE>*&amp;--Date format should be as per the user profile settings</FPCLINE>
      <FPCLINE>* Convert Date Format to SAP Format (10 digits)</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      date_internal            = fp_reguh-laufd</FPCLINE>
      <FPCLINE>    IMPORTING</FPCLINE>
      <FPCLINE>      date_external            = fp_payment_date</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>      OTHERS                   = 2.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>    CLEAR fp_payment_date.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_payment_date</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_fetch_email</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Fetch Contact email</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    --&gt;FP_REGUH   Settlement data from payment program                *</FPCLINE>
      <FPCLINE>*    &lt;--FP_EMAIL_CONT   Contact Email                                  *</FPCLINE>
      <FPCLINE>*    &lt;--FP_CONTACT_LABEL Email label                                   *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_fetch_email USING    fp_reguh         TYPE ty_reguh &quot; E-Mail Address</FPCLINE>
      <FPCLINE>                   CHANGING fp_email_cont    TYPE string   &quot;Contact Email</FPCLINE>
      <FPCLINE>                            fp_contact_label TYPE string.  &quot;Email label</FPCLINE>
      <FPCLINE>*&amp;--&gt;Local Data Declarations</FPCLINE>
      <FPCLINE>  DATA: lv_remit_bukrs   TYPE vkbuk,                                 &quot; Company code of the sales organization</FPCLINE>
      <FPCLINE>        lv_adrnr TYPE adrnr,                                         &quot; Address</FPCLINE>
      <FPCLINE>        li_lines_email  TYPE STANDARD TABLE OF tline INITIAL SIZE 0, &quot;SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        lwa_lines       TYPE tline,                                  &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        lv_form_name    TYPE tdobname.                               &quot; Name</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Constants</FPCLINE>
      <FPCLINE>  CONSTANTS: lc_mprogram       TYPE programm        VALUE &apos;ZOTCP0013O_MONTHLY_OPEN_AR_STM&apos;, &quot;ABAP Program Name</FPCLINE>
      <FPCLINE>             lc_param_bukrs    TYPE enhee_parameter VALUE &apos;Z_REMIT_TO_ADDRESS&apos;,             &quot; Parameter</FPCLINE>
      <FPCLINE>             lc_soption        TYPE char2           VALUE &apos;EQ&apos;,                             &quot;Selection Option</FPCLINE>
      <FPCLINE>             lc_email          TYPE tdobname        VALUE &apos;ZOTC0101_CONT_EMAIL&apos;,            &quot; Name</FPCLINE>
      <FPCLINE>             lc_id             TYPE tdid            VALUE &apos;ST&apos;,                             &quot; Material-sales text</FPCLINE>
      <FPCLINE>             lc_object         TYPE tdobject        VALUE &apos;TEXT&apos;,                           &quot; Order item text</FPCLINE>
      <FPCLINE>             lc_english        TYPE spras           VALUE &apos;E&apos;.                              &quot; Language Key</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Retrieve the email address</FPCLINE>
      <FPCLINE>*&amp;--Fetching company code 2068 from ZOTC_PRC_CONTROL table for remit to address</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  SELECT mvalue2           &quot; Select Options: Value High</FPCLINE>
      <FPCLINE>    UP TO 1 ROWS</FPCLINE>
      <FPCLINE>     FROM zotc_prc_control &quot; OTC Process Team Control Table</FPCLINE>
      <FPCLINE>     INTO lv_remit_bukrs</FPCLINE>
      <FPCLINE>     WHERE vkorg = fp_reguh-zbukr</FPCLINE>
      <FPCLINE>      AND mprogram   = lc_mprogram</FPCLINE>
      <FPCLINE>      AND mparameter = lc_param_bukrs</FPCLINE>
      <FPCLINE>      AND mactive    = abap_true</FPCLINE>
      <FPCLINE>      AND soption    = lc_soption.</FPCLINE>
      <FPCLINE>  ENDSELECT.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL AND lv_remit_bukrs IS NOT INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--Fetch the address number</FPCLINE>
      <FPCLINE>    SELECT SINGLE adrnr FROM t001 INTO lv_adrnr</FPCLINE>
      <FPCLINE>                  WHERE bukrs = lv_remit_bukrs.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--Fetch contact email address</FPCLINE>
      <FPCLINE>      SELECT smtp_addr &quot; E-Mail Address</FPCLINE>
      <FPCLINE>         UP TO 1 ROWS</FPCLINE>
      <FPCLINE>         FROM adr6     &quot; E-Mail Addresses (Business Address Services)</FPCLINE>
      <FPCLINE>         INTO fp_email_cont</FPCLINE>
      <FPCLINE>     WHERE addrnumber = lv_adrnr.</FPCLINE>
      <FPCLINE>      ENDSELECT.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--Do nothing</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL AND lv_remit_bukrs IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--First check customer language, if not fall back on English</FPCLINE>
      <FPCLINE>*&amp;--Call Function module to fetch the label for Email Number.</FPCLINE>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = gv_spras</FPCLINE>
      <FPCLINE>      name                    = lc_email</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines_email</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines_email INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_contact_label = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>**&amp;--Call Function module to fetch the label for Email Number.</FPCLINE>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_email</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines_email</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines_email INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_contact_label = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--if there is no email address maintained, do not print the label</FPCLINE>
      <FPCLINE>  IF fp_email_cont IS INITIAL.</FPCLINE>
      <FPCLINE>    CLEAR fp_contact_label.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF fp_email_cont IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_fetch_email</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_customer_name</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Fetch Customer name</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    --&gt;FP_REGUH   Settlement data from payment program</FPCLINE>
      <FPCLINE>*    &lt;--FP_CUST_NAME  Name 1</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_customer_name USING    fp_reguh     TYPE ty_reguh  &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                     CHANGING fp_cust_name TYPE name1_gp. &quot; Name 1</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;&amp;--Fetch the customer name</FPCLINE>
      <FPCLINE>  fp_cust_name = fp_reguh-name1.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_customer_name</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_customer_addr</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Fetch Customer address</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   --&gt;FP_REGUH   Settlement data from payment program</FPCLINE>
      <FPCLINE>*   &lt;--FP_CUST_ADRNR     Address number</FPCLINE>
      <FPCLINE>*   &lt;--FP_CUST_COUNTRY   Country Key</FPCLINE>
      <FPCLINE>*   &lt;--FP_COUNTRY_NAME   country name</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_customer_addr USING fp_reguh           TYPE ty_reguh   &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                     CHANGING fp_cust_adrnr   TYPE ad_addrnum &quot; Address number</FPCLINE>
      <FPCLINE>                              fp_cust_country TYPE  land1     &quot; Country Key</FPCLINE>
      <FPCLINE>                              fp_country_name TYPE  string.   &quot;Country name</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local data Declarations</FPCLINE>
      <FPCLINE>  DATA: lv_spras          TYPE spras, &quot; Language Key</FPCLINE>
      <FPCLINE>        lv_cust_country   TYPE land1, &quot; Country Key</FPCLINE>
      <FPCLINE>        lv_cust_langu     TYPE spras. &quot; Language Key</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CONSTANTS: lc_english    TYPE spras   VALUE &apos;E&apos;. &quot; Language Key</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch the address number which will be used for address node</FPCLINE>
      <FPCLINE>  fp_cust_adrnr = fp_reguh-adrnr.</FPCLINE>
      <FPCLINE>*&amp;--Sending country.</FPCLINE>
      <FPCLINE>  fp_cust_country = fp_reguh-land1.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  SELECT SINGLE spras  FROM t001 INTO lv_spras</FPCLINE>
      <FPCLINE>        WHERE bukrs = fp_reguh-zbukr.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--do nothing</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  SELECT country &quot; Country Key</FPCLINE>
      <FPCLINE>         langu   &quot; Language Key</FPCLINE>
      <FPCLINE>    UP TO 1 ROWS FROM adrc INTO (lv_cust_country,lv_cust_langu)</FPCLINE>
      <FPCLINE>    WHERE addrnumber = fp_reguh-adrnr.</FPCLINE>
      <FPCLINE>  ENDSELECT.</FPCLINE>
      <FPCLINE>*&amp;--First check for customer&apos;s language code for getting country name</FPCLINE>
      <FPCLINE>*&amp;--Get the country name from T005T table.</FPCLINE>
      <FPCLINE>  SELECT SINGLE landx &quot; Country Name</FPCLINE>
      <FPCLINE>     FROM t005t       &quot; Country Names</FPCLINE>
      <FPCLINE>     INTO fp_country_name</FPCLINE>
      <FPCLINE>     WHERE spras = lv_cust_langu</FPCLINE>
      <FPCLINE>     AND   land1 = fp_cust_country.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS NOT INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--If not found check for country&apos;s language code for getting country name</FPCLINE>
      <FPCLINE>*&amp;--Get the country name from T005T table.</FPCLINE>
      <FPCLINE>    SELECT SINGLE landx &quot; Country Name</FPCLINE>
      <FPCLINE>        FROM t005t      &quot; Country Names</FPCLINE>
      <FPCLINE>       INTO fp_country_name</FPCLINE>
      <FPCLINE>       WHERE spras = lv_spras</FPCLINE>
      <FPCLINE>       AND   land1 = fp_cust_country.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS NOT INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--If not found country name should check for English language.</FPCLINE>
      <FPCLINE>*&amp;--Get the country name from T005T table.</FPCLINE>
      <FPCLINE>      SELECT SINGLE landx &quot; Country Name</FPCLINE>
      <FPCLINE>               FROM t005t &quot; Country Names</FPCLINE>
      <FPCLINE>        INTO fp_country_name</FPCLINE>
      <FPCLINE>      WHERE spras = lc_english</FPCLINE>
      <FPCLINE>      AND   land1 = fp_cust_country.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_customer_addr</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_populate_iban</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Fetch IBAN Number</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    --&gt;FP_REGUH   Settlement data from payment program</FPCLINE>
      <FPCLINE>*    &lt;--FP_IBAN    IBAN of the Payee</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_populate_iban USING    fp_reguh TYPE ty_reguh &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                     CHANGING fp_iban TYPE dziban.   &quot; IBAN of the Payee</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  DATA: lv_first2 TYPE char2, &quot; First2 of type CHAR2</FPCLINE>
      <FPCLINE>        lv_length TYPE i.     &quot; Length of type Integers</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Populate IBAN.</FPCLINE>
      <FPCLINE>  fp_iban = fp_reguh-ziban.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  lv_length = strlen( fp_iban ) - 5.</FPCLINE>
      <FPCLINE>  lv_length = lv_length - 2.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  fp_iban = replace( val = fp_iban</FPCLINE>
      <FPCLINE>                  off = 2</FPCLINE>
      <FPCLINE>                  len = lv_length</FPCLINE>
      <FPCLINE>                  with = repeat( val = &apos;X&apos; occ = lv_length ) ).</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_populate_iban</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_populate_sepa</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*  Populate SEPA MANDATE</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_REGUH   Settlement data from payment program</FPCLINE>
      <FPCLINE>*      &lt;--FP_MANDATE Unique Reference to Mandate for each Payee</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_populate_sepa USING    fp_reguh   TYPE ty_reguh    &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                     CHANGING fp_mandate TYPE sepa_mndid. &quot; Unique Reference to Mandate for each Payee</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  DATA lv_mndid TYPE sepa_mndid. &quot; Unique Reference to Mandate for each Payee</FPCLINE>
      <FPCLINE>*&amp;--Populate SEPA mandate</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  SELECT SINGLE mndid FROM sepa_mandate INTO lv_mndid</FPCLINE>
      <FPCLINE>                           WHERE mguid = fp_reguh-mguid.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    fp_mandate = lv_mndid.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>ENDFORM. &quot;f_populate_sepa</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_populate_stand_text</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    Populate IBAN text</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_IBAN            IBAN of the Payee                         *</FPCLINE>
      <FPCLINE>*      --&gt;FP_MANDATE         Unique Reference to Mandate for each Payee*</FPCLINE>
      <FPCLINE>*      --&gt;FP_REGUH           Settlement data from payment program      *</FPCLINE>
      <FPCLINE>*      &lt;--FP_GT_MESSAGE_TEXT  Table for Message Text                   *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_populate_stand_text USING    fp_iban           TYPE dziban     &quot; IBAN of the Payee</FPCLINE>
      <FPCLINE>                                    fp_reguh          TYPE ty_reguh   &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                                    fp_mandate        TYPE sepa_mndid &quot; Unique Reference to Mandate for each Payee</FPCLINE>
      <FPCLINE>                           CHANGING fp_gt_message_text TYPE srm_t_solisti1.</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>  TYPES: BEGIN OF lty_string,</FPCLINE>
      <FPCLINE>         text TYPE string,</FPCLINE>
      <FPCLINE>         END OF lty_string.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Data Declarations</FPCLINE>
      <FPCLINE>  DATA:  li_msg_final      TYPE STANDARD TABLE OF tline INITIAL SIZE 0,    &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE>         li_final_text     TYPE STANDARD TABLE OF solisti1 INITIAL SIZE 0, &quot; SAPoffice: Single List with Column Length 255</FPCLINE>
      <FPCLINE>         lwa_imessage      TYPE  solisti1,                                 &quot;work area imessage</FPCLINE>
      <FPCLINE>         lwa_text          TYPE solisti1,                                  &quot; SAPoffice: Single List with Column Length 255</FPCLINE>
      <FPCLINE>         lv_spras          TYPE spras,                                     &quot; Language Key</FPCLINE>
      <FPCLINE>         li_string         TYPE STANDARD TABLE OF lty_string,</FPCLINE>
      <FPCLINE>         lwa_string        TYPE lty_string,</FPCLINE>
      <FPCLINE>         lv_string         TYPE string,</FPCLINE>
      <FPCLINE>         lv_tabix          TYPE sy-tabix,                                  &quot; Index of Internal Tables</FPCLINE>
      <FPCLINE>         lv_line           TYPE i,                                         &quot; Line of type Integers</FPCLINE>
      <FPCLINE>         lv_date           TYPE char10,                                    &quot; Date of type CHAR10</FPCLINE>
      <FPCLINE>         lv_iban           TYPE char35,                                    &quot; Iban of type CHAR35</FPCLINE>
      <FPCLINE>         lv_sepa           TYPE char35.                                    &quot; Sepa of type CHAR35</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Constants                                                                  &quot; Language Key</FPCLINE>
      <FPCLINE>  CONSTANTS: lc_id          TYPE tdid       VALUE &apos;ST&apos;,                      &quot; Text ID</FPCLINE>
      <FPCLINE>             lc_name        TYPE tdobname   VALUE &apos;ZOTC0101_IBAN_SEPA&apos;,      &quot; Name</FPCLINE>
      <FPCLINE>             lc_name_2030   TYPE tdobname   VALUE &apos;ZOTC0101_IBAN_SEPA_2030&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_name_2032   TYPE tdobname   VALUE &apos;ZOTC0101_IBAN_SEPA_2032&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_2030        TYPE dzbukr     VALUE &apos;2030&apos;,                    &quot; CC 2030 for Germany</FPCLINE>
      <FPCLINE>             lc_2032        TYPE dzbukr     VALUE &apos;2032&apos;,                    &quot; CC 2032 for Germany</FPCLINE>
      <FPCLINE>             lc_char1       TYPE char2      VALUE &apos;&amp;1&apos;,                      &quot; Char7 of type CHAR10</FPCLINE>
      <FPCLINE>             lc_char2       TYPE char2      VALUE &apos;&amp;2&apos;,                      &quot; Char7 of type CHAR10</FPCLINE>
      <FPCLINE>             lc_char3       TYPE char2      VALUE &apos;&amp;3&apos;,                      &quot; Char3 of type CHAR10</FPCLINE>
      <FPCLINE>             lc_en          TYPE spras      VALUE &apos;E&apos;,                       &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_de          TYPE spras      VALUE &apos;D&apos;,                       &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_text        TYPE tdobject   VALUE &apos;TEXT&apos;.                    &quot; Texts: Application Object</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  FIELD-SYMBOLS &lt;lfs_msg_final&gt; TYPE tline. &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF gv_spras NE lc_de.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        client                  = sy-mandt</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = gv_spras</FPCLINE>
      <FPCLINE>        name                    = lc_name</FPCLINE>
      <FPCLINE>        object                  = lc_text</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_msg_final</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;Disclaimer: Standard text will always contain more than one line.</FPCLINE>
      <FPCLINE>      lv_line = lines( li_msg_final ).</FPCLINE>
      <FPCLINE>      LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;.</FPCLINE>
      <FPCLINE>        lv_tabix = sy-tabix.</FPCLINE>
      <FPCLINE>*&amp;--Date format should be unique for all over the form.</FPCLINE>
      <FPCLINE>        CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>          EXPORTING</FPCLINE>
      <FPCLINE>            date_internal            = sy-datum</FPCLINE>
      <FPCLINE>          IMPORTING</FPCLINE>
      <FPCLINE>            date_external            = lv_date</FPCLINE>
      <FPCLINE>          EXCEPTIONS</FPCLINE>
      <FPCLINE>            date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>            OTHERS                   = 2.</FPCLINE>
      <FPCLINE>        IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>          CLEAR lv_date.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        REPLACE lc_char1  WITH lv_date INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>        lv_iban = fp_iban.</FPCLINE>
      <FPCLINE>        lv_sepa = fp_mandate.</FPCLINE>
      <FPCLINE>        SHIFT lv_iban RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>        SHIFT lv_sepa RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>        REPLACE lc_char2  WITH lv_iban INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>        CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>        REPLACE lc_char3 WITH lv_sepa INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>        CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          IF lv_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE>            CONDENSE lv_string.</FPCLINE>
      <FPCLINE>            lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>            APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>            CLEAR lv_string.</FPCLINE>
      <FPCLINE>            lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>              lwa_string-text = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>          ELSE. &quot; ELSE -&gt; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>            lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>              CONDENSE lv_string.</FPCLINE>
      <FPCLINE>              lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>        ELSE. &quot; ELSE -&gt; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE>          CONCATENATE lv_string &lt;lfs_msg_final&gt;-tdline INTO lv_string SEPARATED BY space.</FPCLINE>
      <FPCLINE>          IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>            CONDENSE lv_string.</FPCLINE>
      <FPCLINE>            lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>            APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>            CLEAR lv_string.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ENDLOOP. &quot; LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      IF li_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        IF fp_reguh-zbukr = &apos;2044&apos;. &quot;+++SMUKHER4</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 1.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text1 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text2 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text2 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 3.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text3 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text3 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 4.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text5 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text4 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 5.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text6 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text6 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ELSE. &quot; ELSE -&gt; IF fp_reguh-zbukr = &apos;2044&apos;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 1.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text1 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text2 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text2 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 3.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text3 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text3 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 4.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text4 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text4 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF fp_reguh-zbukr = &apos;2044&apos;</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF li_string IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>        EXPORTING</FPCLINE>
      <FPCLINE>          client                  = sy-mandt</FPCLINE>
      <FPCLINE>          id                      = lc_id</FPCLINE>
      <FPCLINE>          language                = lc_en</FPCLINE>
      <FPCLINE>          name                    = lc_name</FPCLINE>
      <FPCLINE>          object                  = lc_text</FPCLINE>
      <FPCLINE>        TABLES</FPCLINE>
      <FPCLINE>          lines                   = li_msg_final</FPCLINE>
      <FPCLINE>        EXCEPTIONS</FPCLINE>
      <FPCLINE>          id                      = 1</FPCLINE>
      <FPCLINE>          language                = 2</FPCLINE>
      <FPCLINE>          name                    = 3</FPCLINE>
      <FPCLINE>          not_found               = 4</FPCLINE>
      <FPCLINE>          object                  = 5</FPCLINE>
      <FPCLINE>          reference_check         = 6</FPCLINE>
      <FPCLINE>          wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>          OTHERS                  = 8.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        lv_line = lines( li_msg_final ).</FPCLINE>
      <FPCLINE>        LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;.</FPCLINE>
      <FPCLINE>          lv_tabix = sy-tabix.</FPCLINE>
      <FPCLINE>*&amp;--Date format should be unique for all over the form.</FPCLINE>
      <FPCLINE>          CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>            EXPORTING</FPCLINE>
      <FPCLINE>              date_internal            = sy-datum</FPCLINE>
      <FPCLINE>            IMPORTING</FPCLINE>
      <FPCLINE>              date_external            = lv_date</FPCLINE>
      <FPCLINE>            EXCEPTIONS</FPCLINE>
      <FPCLINE>              date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>              OTHERS                   = 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>            CLEAR lv_date.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE>          REPLACE lc_char1  WITH lv_date INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>*          WRITE sy-datum TO lv_date.</FPCLINE>
      <FPCLINE>          lv_iban = fp_iban.</FPCLINE>
      <FPCLINE>          lv_sepa = fp_mandate.</FPCLINE>
      <FPCLINE>          SHIFT lv_iban RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          SHIFT lv_sepa RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          REPLACE lc_char2  WITH lv_iban INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          REPLACE lc_char3 WITH lv_sepa INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            IF lv_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE>              CONDENSE lv_string.</FPCLINE>
      <FPCLINE>              lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>              lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                lwa_string-text = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ELSE. &quot; ELSE -&gt; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>              lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>          ELSE. &quot; ELSE -&gt; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE>            CONCATENATE lv_string &lt;lfs_msg_final&gt;-tdline INTO lv_string.</FPCLINE>
      <FPCLINE>            IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>              CONDENSE lv_string.</FPCLINE>
      <FPCLINE>              lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDLOOP. &quot; LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        IF li_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 1.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text1 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text2 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 3.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text3 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDIF. &quot; IF li_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF gv_spras NE lc_de</FPCLINE>
      <FPCLINE>*&amp;&amp;--Populate only for German company codes.</FPCLINE>
      <FPCLINE>    IF fp_reguh-zbukr = lc_2030.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>        EXPORTING</FPCLINE>
      <FPCLINE>          client                  = sy-mandt</FPCLINE>
      <FPCLINE>          id                      = lc_id</FPCLINE>
      <FPCLINE>          language                = gv_spras</FPCLINE>
      <FPCLINE>          name                    = lc_name_2030</FPCLINE>
      <FPCLINE>          object                  = lc_text</FPCLINE>
      <FPCLINE>        TABLES</FPCLINE>
      <FPCLINE>          lines                   = li_msg_final</FPCLINE>
      <FPCLINE>        EXCEPTIONS</FPCLINE>
      <FPCLINE>          id                      = 1</FPCLINE>
      <FPCLINE>          language                = 2</FPCLINE>
      <FPCLINE>          name                    = 3</FPCLINE>
      <FPCLINE>          not_found               = 4</FPCLINE>
      <FPCLINE>          object                  = 5</FPCLINE>
      <FPCLINE>          reference_check         = 6</FPCLINE>
      <FPCLINE>          wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>          OTHERS                  = 8.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;Disclaimer: Standard text will always contain more than one line.</FPCLINE>
      <FPCLINE>        lv_line = lines( li_msg_final ).</FPCLINE>
      <FPCLINE>        LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;.</FPCLINE>
      <FPCLINE>          lv_tabix = sy-tabix.</FPCLINE>
      <FPCLINE>*&amp;--Date format should be unique for all over the form.</FPCLINE>
      <FPCLINE>          CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>            EXPORTING</FPCLINE>
      <FPCLINE>              date_internal            = sy-datum</FPCLINE>
      <FPCLINE>            IMPORTING</FPCLINE>
      <FPCLINE>              date_external            = lv_date</FPCLINE>
      <FPCLINE>            EXCEPTIONS</FPCLINE>
      <FPCLINE>              date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>              OTHERS                   = 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>            CLEAR lv_date.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          REPLACE lc_char1  WITH lv_date INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>*          WRITE sy-datum TO lv_date.</FPCLINE>
      <FPCLINE>          lv_iban = fp_iban.</FPCLINE>
      <FPCLINE>          lv_sepa = fp_mandate.</FPCLINE>
      <FPCLINE>          SHIFT lv_iban RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          SHIFT lv_sepa RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          REPLACE lc_char2  WITH lv_iban INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          REPLACE lc_char3 WITH lv_sepa INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            IF lv_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE>              CONDENSE lv_string.</FPCLINE>
      <FPCLINE>              lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>              lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                lwa_string-text = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ELSE. &quot; ELSE -&gt; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>              lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>          ELSE. &quot; ELSE -&gt; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE>            CONCATENATE lv_string &lt;lfs_msg_final&gt;-tdline INTO lv_string SEPARATED BY space.</FPCLINE>
      <FPCLINE>            IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>              CONDENSE lv_string.</FPCLINE>
      <FPCLINE>              lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDLOOP. &quot; LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        IF li_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 1.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text1 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text2 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text2 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 3.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text5 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 4.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text4 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDIF. &quot; IF li_string IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>          EXPORTING</FPCLINE>
      <FPCLINE>            client                  = sy-mandt</FPCLINE>
      <FPCLINE>            id                      = lc_id</FPCLINE>
      <FPCLINE>            language                = lc_en</FPCLINE>
      <FPCLINE>            name                    = lc_name</FPCLINE>
      <FPCLINE>            object                  = lc_text</FPCLINE>
      <FPCLINE>          TABLES</FPCLINE>
      <FPCLINE>            lines                   = li_msg_final</FPCLINE>
      <FPCLINE>          EXCEPTIONS</FPCLINE>
      <FPCLINE>            id                      = 1</FPCLINE>
      <FPCLINE>            language                = 2</FPCLINE>
      <FPCLINE>            name                    = 3</FPCLINE>
      <FPCLINE>            not_found               = 4</FPCLINE>
      <FPCLINE>            object                  = 5</FPCLINE>
      <FPCLINE>            reference_check         = 6</FPCLINE>
      <FPCLINE>            wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>            OTHERS                  = 8.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          lv_line = lines( li_msg_final ).</FPCLINE>
      <FPCLINE>          LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;.</FPCLINE>
      <FPCLINE>            lv_tabix = sy-tabix.</FPCLINE>
      <FPCLINE>*&amp;--Date format should be unique for all over the form.</FPCLINE>
      <FPCLINE>            CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>              EXPORTING</FPCLINE>
      <FPCLINE>                date_internal            = sy-datum</FPCLINE>
      <FPCLINE>              IMPORTING</FPCLINE>
      <FPCLINE>                date_external            = lv_date</FPCLINE>
      <FPCLINE>              EXCEPTIONS</FPCLINE>
      <FPCLINE>                date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>                OTHERS                   = 2.</FPCLINE>
      <FPCLINE>            IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>              CLEAR lv_date.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE>            REPLACE lc_char1  WITH lv_date INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>*            WRITE sy-datum TO lv_date.</FPCLINE>
      <FPCLINE>            lv_iban = fp_iban.</FPCLINE>
      <FPCLINE>            lv_sepa = fp_mandate.</FPCLINE>
      <FPCLINE>            SHIFT lv_iban RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>            SHIFT lv_sepa RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>            REPLACE lc_char2  WITH lv_iban INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            REPLACE lc_char3 WITH lv_sepa INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>              IF lv_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE>                CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>                lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                  lwa_string-text = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                  APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                  CLEAR lv_string.</FPCLINE>
      <FPCLINE>                ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>              ELSE. &quot; ELSE -&gt; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>                lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                  CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                  lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                  APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                  CLEAR lv_string.</FPCLINE>
      <FPCLINE>                ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>            ELSE. &quot; ELSE -&gt; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE>              CONCATENATE lv_string &lt;lfs_msg_final&gt;-tdline INTO lv_string.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDLOOP. &quot; LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          IF li_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 1.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text1 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 2.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text2 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 3.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text3 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 4.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text4 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF li_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ELSEIF fp_reguh-zbukr = lc_2032.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>        EXPORTING</FPCLINE>
      <FPCLINE>          client                  = sy-mandt</FPCLINE>
      <FPCLINE>          id                      = lc_id</FPCLINE>
      <FPCLINE>          language                = gv_spras</FPCLINE>
      <FPCLINE>          name                    = lc_name_2032</FPCLINE>
      <FPCLINE>          object                  = lc_text</FPCLINE>
      <FPCLINE>        TABLES</FPCLINE>
      <FPCLINE>          lines                   = li_msg_final</FPCLINE>
      <FPCLINE>        EXCEPTIONS</FPCLINE>
      <FPCLINE>          id                      = 1</FPCLINE>
      <FPCLINE>          language                = 2</FPCLINE>
      <FPCLINE>          name                    = 3</FPCLINE>
      <FPCLINE>          not_found               = 4</FPCLINE>
      <FPCLINE>          object                  = 5</FPCLINE>
      <FPCLINE>          reference_check         = 6</FPCLINE>
      <FPCLINE>          wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>          OTHERS                  = 8.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;Disclaimer: Standard text will always contain more than one line.</FPCLINE>
      <FPCLINE>        lv_line = lines( li_msg_final ).</FPCLINE>
      <FPCLINE>        LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;.</FPCLINE>
      <FPCLINE>          lv_tabix = sy-tabix.</FPCLINE>
      <FPCLINE>*&amp;--Date format should be unique for all over the form.</FPCLINE>
      <FPCLINE>          CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>            EXPORTING</FPCLINE>
      <FPCLINE>              date_internal            = sy-datum</FPCLINE>
      <FPCLINE>            IMPORTING</FPCLINE>
      <FPCLINE>              date_external            = lv_date</FPCLINE>
      <FPCLINE>            EXCEPTIONS</FPCLINE>
      <FPCLINE>              date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>              OTHERS                   = 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>            CLEAR lv_date.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE>          REPLACE lc_char1  WITH lv_date INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>*          WRITE sy-datum TO lv_date.</FPCLINE>
      <FPCLINE>          lv_iban = fp_iban.</FPCLINE>
      <FPCLINE>          lv_sepa = fp_mandate.</FPCLINE>
      <FPCLINE>          SHIFT lv_iban RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          SHIFT lv_sepa RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          REPLACE lc_char2  WITH lv_iban INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          REPLACE lc_char3 WITH lv_sepa INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>          CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            IF lv_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE>              CONDENSE lv_string.</FPCLINE>
      <FPCLINE>              lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>              lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                lwa_string-text = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ELSE. &quot; ELSE -&gt; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>              lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>          ELSE. &quot; ELSE -&gt; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE>            CONCATENATE lv_string &lt;lfs_msg_final&gt;-tdline INTO lv_string SEPARATED BY space.</FPCLINE>
      <FPCLINE>            IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>              CONDENSE lv_string.</FPCLINE>
      <FPCLINE>              lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>              APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>              CLEAR lv_string.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDLOOP. &quot; LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        IF li_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 1.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text1 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 2.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text2 = lwa_string-text.</FPCLINE>
      <FPCLINE>            SHIFT gv_text2 RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 3.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text5 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_string INTO lwa_string INDEX 4.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            gv_text4 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDIF. &quot; IF li_string IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>          EXPORTING</FPCLINE>
      <FPCLINE>            client                  = sy-mandt</FPCLINE>
      <FPCLINE>            id                      = lc_id</FPCLINE>
      <FPCLINE>            language                = lc_en</FPCLINE>
      <FPCLINE>            name                    = lc_name</FPCLINE>
      <FPCLINE>            object                  = lc_text</FPCLINE>
      <FPCLINE>          TABLES</FPCLINE>
      <FPCLINE>            lines                   = li_msg_final</FPCLINE>
      <FPCLINE>          EXCEPTIONS</FPCLINE>
      <FPCLINE>            id                      = 1</FPCLINE>
      <FPCLINE>            language                = 2</FPCLINE>
      <FPCLINE>            name                    = 3</FPCLINE>
      <FPCLINE>            not_found               = 4</FPCLINE>
      <FPCLINE>            object                  = 5</FPCLINE>
      <FPCLINE>            reference_check         = 6</FPCLINE>
      <FPCLINE>            wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>            OTHERS                  = 8.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          lv_line = lines( li_msg_final ).</FPCLINE>
      <FPCLINE>          LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;.</FPCLINE>
      <FPCLINE>            lv_tabix = sy-tabix.</FPCLINE>
      <FPCLINE>*&amp;--Date format should be unique for all over the form.</FPCLINE>
      <FPCLINE>            CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>              EXPORTING</FPCLINE>
      <FPCLINE>                date_internal            = sy-datum</FPCLINE>
      <FPCLINE>              IMPORTING</FPCLINE>
      <FPCLINE>                date_external            = lv_date</FPCLINE>
      <FPCLINE>              EXCEPTIONS</FPCLINE>
      <FPCLINE>                date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>                OTHERS                   = 2.</FPCLINE>
      <FPCLINE>            IF sy-subrc &lt;&gt; 0.</FPCLINE>
      <FPCLINE>              CLEAR lv_date.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc &lt;&gt; 0</FPCLINE>
      <FPCLINE>            REPLACE lc_char1  WITH lv_date INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>*            WRITE sy-datum TO lv_date.</FPCLINE>
      <FPCLINE>            lv_iban = fp_iban.</FPCLINE>
      <FPCLINE>            lv_sepa = fp_mandate.</FPCLINE>
      <FPCLINE>            SHIFT lv_iban RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>            SHIFT lv_sepa RIGHT DELETING TRAILING space.</FPCLINE>
      <FPCLINE>            REPLACE lc_char2  WITH lv_iban INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            REPLACE lc_char3 WITH lv_sepa INTO &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>            CONDENSE &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>              IF lv_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE>                CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>                lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                  lwa_string-text = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                  APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                  CLEAR lv_string.</FPCLINE>
      <FPCLINE>                ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>              ELSE. &quot; ELSE -&gt; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>                lv_string = &lt;lfs_msg_final&gt;-tdline.</FPCLINE>
      <FPCLINE>                IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                  CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                  lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                  APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                  CLEAR lv_string.</FPCLINE>
      <FPCLINE>                ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>            ELSE. &quot; ELSE -&gt; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE>              CONCATENATE lv_string &lt;lfs_msg_final&gt;-tdline INTO lv_string.</FPCLINE>
      <FPCLINE>              IF lv_tabix = lv_line.</FPCLINE>
      <FPCLINE>                CONDENSE lv_string.</FPCLINE>
      <FPCLINE>                lwa_string-text = lv_string.</FPCLINE>
      <FPCLINE>                APPEND lwa_string TO li_string.</FPCLINE>
      <FPCLINE>                CLEAR lv_string.</FPCLINE>
      <FPCLINE>              ENDIF. &quot; IF lv_tabix = lv_line</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF &lt;lfs_msg_final&gt;-tdformat IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDLOOP. &quot; LOOP AT li_msg_final ASSIGNING &lt;lfs_msg_final&gt;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          IF li_string IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 1.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text1 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 2.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text2 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 3.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text3 = lwa_string-text.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            READ TABLE li_string INTO lwa_string INDEX 4.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              gv_text4 = lwa_string-text.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF li_string IS NOT INITIAL</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF fp_reguh-zbukr = lc_2030</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF gv_spras NE lc_de</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_populate_stand_text</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_populate_item</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    Populate Item table</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_REGUP       Processed items from payment program          *</FPCLINE>
      <FPCLINE>*      &lt;--FP_GT_DISPLAY  Item table display                            *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_populate_item  USING    fp_i_regup      TYPE ty_t_regup  &quot;Settlement data from payment program</FPCLINE>
      <FPCLINE>                      CHANGING fp_gt_display   TYPE tt_display. &quot;Item table display</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Data declaration</FPCLINE>
      <FPCLINE>  DATA: lwa_regup TYPE ty_regup, &quot; Processed items from payment program</FPCLINE>
      <FPCLINE>        lv_sum    TYPE wrbtr,    &quot; Amount in Document Currency</FPCLINE>
      <FPCLINE>        lv_format TYPE xudcpfm,  &quot; Decimal Format</FPCLINE>
      <FPCLINE>        lwa_display TYPE ty_display.</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>  lv_sum = 0.</FPCLINE>
      <FPCLINE>*&amp;--Populate the item table.</FPCLINE>
      <FPCLINE>  LOOP AT fp_i_regup INTO lwa_regup.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    lwa_display-invoice    = lwa_regup-belnr.</FPCLINE>
      <FPCLINE>    lwa_display-po_num     = lwa_regup-xblnr.</FPCLINE>
      <FPCLINE>*&amp;--&gt;Begin of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE>*     lwa_display-inv_date   = lwa_regup-bldat.</FPCLINE>
      <FPCLINE>*    lwa_display-cash_disc  = lwa_regup-sknto.</FPCLINE>
      <FPCLINE>*    lwa_display-gross_amt  = lwa_regup-wrbtr.</FPCLINE>
      <FPCLINE>*&amp;&lt;--End of FUT changes by SMUKHER4 on 29-Nov-2018</FPCLINE>
      <FPCLINE>*&amp;--Date format should be user specific.</FPCLINE>
      <FPCLINE>    CALL FUNCTION &apos;CONVERT_DATE_TO_EXTERNAL&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        date_internal            = lwa_regup-bldat</FPCLINE>
      <FPCLINE>      IMPORTING</FPCLINE>
      <FPCLINE>        date_external            = lwa_display-inv_date</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        date_internal_is_invalid = 1</FPCLINE>
      <FPCLINE>        OTHERS                   = 2.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Decimal notation should be country specific.</FPCLINE>
      <FPCLINE>    WRITE lwa_regup-sknto  TO lwa_display-cash_disc CURRENCY gv_currency.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    lwa_display-currency   = lwa_regup-waers.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Checking the credit/debit indicator.</FPCLINE>
      <FPCLINE>    IF lwa_regup-shkzg = &apos;H&apos;.</FPCLINE>
      <FPCLINE>*&amp;--If it is a credit case, then it should be negative</FPCLINE>
      <FPCLINE>      lwa_regup-wrbtr = ( -1 ) * lwa_regup-wrbtr.</FPCLINE>
      <FPCLINE>    ELSE. &quot; ELSE -&gt; IF lwa_regup-shkzg = &apos;H&apos;</FPCLINE>
      <FPCLINE>*&amp;--for debit case, it is positive.</FPCLINE>
      <FPCLINE>      lwa_regup-wrbtr = lwa_regup-wrbtr.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF lwa_regup-shkzg = &apos;H&apos;</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    WRITE lwa_regup-wrbtr TO lwa_display-gross_amt CURRENCY gv_currency.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    lv_sum = lv_sum + lwa_regup-wrbtr.</FPCLINE>
      <FPCLINE>*    gv_total = lv_sum.</FPCLINE>
      <FPCLINE>    WRITE lv_sum TO gv_total CURRENCY gv_currency.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    APPEND lwa_display TO fp_gt_display.</FPCLINE>
      <FPCLINE>    CLEAR: lwa_display,</FPCLINE>
      <FPCLINE>           lwa_regup.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDLOOP. &quot; LOOP AT fp_i_regup INTO lwa_regup</FPCLINE>
      <FPCLINE>ENDFORM. &quot;f_populate_item</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_get_comm_method</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Populate Email &amp; Fax based on Communication Method.</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_REGUH   Settlement data from payment program</FPCLINE>
      <FPCLINE>*      &lt;--FP_FAX        Complete number: dialling code+number+extension</FPCLINE>
      <FPCLINE>*      &lt;--FP_EMAIL_COMM  E-Mail Address</FPCLINE>
      <FPCLINE>*      &lt;--FP_FAX_LABEL   Fax label</FPCLINE>
      <FPCLINE>*      &lt;--FP_EMAIL_LABEL Email label</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_get_comm_method USING    fp_reguh       TYPE ty_reguh   &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                       CHANGING fp_fax         TYPE ad_fxnrlng &quot; Complete number: dialling code+number+extension</FPCLINE>
      <FPCLINE>                                fp_email_comm  TYPE ad_smtpadr &quot; E-Mail Address</FPCLINE>
      <FPCLINE>                                fp_email_label   TYPE string   &quot;String</FPCLINE>
      <FPCLINE>                                fp_fax_label TYPE string.      &quot;String</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local data declaration</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  DATA: lv_prsnr        TYPE ad_persnum,                             &quot; Person number</FPCLINE>
      <FPCLINE>        lwa_comm        TYPE addr3_sel,                              &quot; Selection parameter for the address of a person in a company</FPCLINE>
      <FPCLINE>        lv_return       TYPE ad_retcode,                             &quot; Return code: Address data check error (E,W,I, SPACE)</FPCLINE>
      <FPCLINE>        lwa_value       TYPE addr3_val,                              &quot; Return structure for the address of a person in a company</FPCLINE>
      <FPCLINE>        lv_flag         TYPE flag,                                   &quot; General Flag</FPCLINE>
      <FPCLINE>        lv_adrnr        TYPE adrnr,                                  &quot; Address</FPCLINE>
      <FPCLINE>        li_lines_email  TYPE STANDARD TABLE OF tline INITIAL SIZE 0, &quot;SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        li_lines_fax    TYPE STANDARD TABLE OF tline INITIAL SIZE 0, &quot;SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        lwa_lines       TYPE tline.                                  &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>  CONSTANTS: lc_id          TYPE tdid       VALUE &apos;ST&apos;,                        &quot; Text ID</FPCLINE>
      <FPCLINE>             lc_2019        TYPE bukrs      VALUE &apos;2019&apos;,                      &quot; Company Code</FPCLINE>
      <FPCLINE>             lc_name_email  TYPE tdobname   VALUE &apos;ZOTC0101_EMAILCOMM&apos;,        &quot; Name</FPCLINE>
      <FPCLINE>             lc_en          TYPE spras      VALUE &apos;E&apos;,                         &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_error       TYPE ad_retcode VALUE &apos;E&apos;,                         &quot; Return code: Address data check error (E,W,I, SPACE)</FPCLINE>
      <FPCLINE>             lc_name_fax    TYPE tdobname   VALUE &apos;ZOTC0101_FAXNO&apos;,            &quot; Name</FPCLINE>
      <FPCLINE>             lc_object      TYPE tdobject   VALUE &apos;TEXT&apos;,                      &quot; Texts: Application Object</FPCLINE>
      <FPCLINE>             lc_int         TYPE ad_comm    VALUE &apos;INT&apos;,                       &quot; Communication Method (Key) (Business Address Services)</FPCLINE>
      <FPCLINE>             lc_prt         TYPE ad_comm    VALUE &apos;PRT&apos;,                       &quot; Communication Method (Key) (Business Address Services)</FPCLINE>
      <FPCLINE>             lc_fax         TYPE ad_comm    VALUE &apos;FAX&apos;,                       &quot; Communication Method (Key) (Business Address Services)</FPCLINE>
      <FPCLINE>             lc_name1       TYPE name1_gp   VALUE &apos;Direct Debit Notification&apos;. &quot; Name 1</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--The Name1 value will always be maintain as constant value. It will not check the</FPCLINE>
      <FPCLINE>*--language key.</FPCLINE>
      <FPCLINE>*&amp;Fetch contact person</FPCLINE>
      <FPCLINE>  SELECT prsnr UP TO 1 ROWS FROM knvk INTO lv_prsnr</FPCLINE>
      <FPCLINE>             WHERE kunnr = fp_reguh-kunnr</FPCLINE>
      <FPCLINE>             AND   name1 = lc_name1</FPCLINE>
      <FPCLINE>             AND   loevm = space.</FPCLINE>
      <FPCLINE>  ENDSELECT.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--do nothing</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--fetch address number</FPCLINE>
      <FPCLINE>  SELECT adrnr UP TO 1 ROWS FROM kna1 INTO lv_adrnr</FPCLINE>
      <FPCLINE>          WHERE kunnr = fp_reguh-kunnr</FPCLINE>
      <FPCLINE>          AND   loevm EQ space.</FPCLINE>
      <FPCLINE>  ENDSELECT.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--do nothing</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF lv_prsnr IS NOT INITIAL AND lv_adrnr IS NOT INITIAL.</FPCLINE>
      <FPCLINE>    lwa_comm-persnumber = lv_prsnr.</FPCLINE>
      <FPCLINE>    lwa_comm-addrnumber = lv_adrnr.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF lv_prsnr IS NOT INITIAL AND lv_adrnr IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF lwa_comm IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Call FM to get the communication method</FPCLINE>
      <FPCLINE>    CALL FUNCTION &apos;ADDR_PERS_COMP_GET&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        address_pers_in_comp_selection = lwa_comm</FPCLINE>
      <FPCLINE>      IMPORTING</FPCLINE>
      <FPCLINE>        address_pers_in_comp_value     = lwa_value</FPCLINE>
      <FPCLINE>        returncode                     = lv_return.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      IF lwa_value-deflt_comm = lc_fax.</FPCLINE>
      <FPCLINE>*&amp;--Populate FAX #</FPCLINE>
      <FPCLINE>        SELECT faxnr_long UP TO 1 ROWS FROM adr3 &quot; Fax Numbers (Business Address Services)</FPCLINE>
      <FPCLINE>             INTO fp_fax WHERE persnumber = lv_prsnr.</FPCLINE>
      <FPCLINE>        ENDSELECT.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ELSE. &quot; ELSE -&gt; IF lwa_value-deflt_comm = lc_fax</FPCLINE>
      <FPCLINE>        IF lwa_value-deflt_comm = lc_int.</FPCLINE>
      <FPCLINE>*&amp;--Populate EMAIl</FPCLINE>
      <FPCLINE>          SELECT smtp_addr UP TO 1 ROWS FROM adr6 &quot; E-Mail Addresses (Business Address Services)</FPCLINE>
      <FPCLINE>            INTO fp_email_comm WHERE persnumber = lv_prsnr.</FPCLINE>
      <FPCLINE>          ENDSELECT.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ELSE. &quot; ELSE -&gt; IF lwa_value-deflt_comm = lc_int</FPCLINE>
      <FPCLINE>          IF lwa_value-deflt_comm = lc_prt.</FPCLINE>
      <FPCLINE>            lv_flag = abap_true.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF lwa_value-deflt_comm = lc_prt</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDIF. &quot; IF lwa_value-deflt_comm = lc_int</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>      ENDIF. &quot; IF lwa_value-deflt_comm = lc_fax</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>      IF lv_return = lc_error.</FPCLINE>
      <FPCLINE>        RETURN.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF lv_return = lc_error</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF lwa_comm IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--&gt;Label population should be dynamic so it would only print either Fax or email.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get email label</FPCLINE>
      <FPCLINE>*&amp;--Call Function module to fetch the label for Email label.</FPCLINE>
      <FPCLINE>*&amp;--First Check the customer maintained language</FPCLINE>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = gv_spras</FPCLINE>
      <FPCLINE>      name                    = lc_name_email</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines_email</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines_email INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_email_label = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>*&amp;--If not fall back on English.</FPCLINE>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_en</FPCLINE>
      <FPCLINE>        name                    = lc_name_email</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines_email</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines_email INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_email_label = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--If email address is not found, no email label should generate.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF fp_email_comm IS INITIAL.</FPCLINE>
      <FPCLINE>    CLEAR fp_email_label.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF fp_email_comm IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Get Fax label</FPCLINE>
      <FPCLINE>*&amp;--First check for Customer maintained Lang</FPCLINE>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = gv_spras</FPCLINE>
      <FPCLINE>      name                    = lc_name_fax</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines_fax</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines_fax INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_fax_label = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>*&amp;--If not found fall back on English</FPCLINE>
      <FPCLINE>*&amp;--get Fax label</FPCLINE>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_en</FPCLINE>
      <FPCLINE>        name                    = lc_name_fax</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines_fax</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines_fax INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_fax_label = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--If Fax # is not found, no fax label should generate.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF fp_fax IS INITIAL.</FPCLINE>
      <FPCLINE>    CLEAR fp_fax_label.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF fp_fax IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--If communication method is printer, no label should be generated.</FPCLINE>
      <FPCLINE>  IF lv_flag IS NOT INITIAL.</FPCLINE>
      <FPCLINE>    CLEAR: fp_fax_label,</FPCLINE>
      <FPCLINE>           fp_email_label.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF lv_flag IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_get_comm_method</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_populate_footer</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Populate Fooetr text</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*     ---&gt;FP_REGUH      Settlement data from payment program           *</FPCLINE>
      <FPCLINE>*      &lt;--FP_GT_FOOTER_DETAILS  Footer table                           *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_populate_footer  USING  fp_reguh TYPE ty_reguh                      &quot; Settlement data from payment program</FPCLINE>
      <FPCLINE>                        CHANGING fp_gt_footer_details TYPE srm_t_solisti1. &quot;Footer table</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local data declarations</FPCLINE>
      <FPCLINE>  DATA:  li_footer       TYPE STANDARD TABLE OF  tline INITIAL SIZE 0,    &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE>         lwa_imessage    TYPE  solisti1,                                  &quot;work area imessage</FPCLINE>
      <FPCLINE>         lv_spras        TYPE  spras,                                     &quot; Language Key</FPCLINE>
      <FPCLINE>         lv_name         TYPE tdobname,                                   &quot; Name</FPCLINE>
      <FPCLINE>         lwa_footer      TYPE  tline,                                     &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE>         li_message_text TYPE STANDARD TABLE OF  solisti1 INITIAL SIZE 0. &quot;Local ITAB</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Constants</FPCLINE>
      <FPCLINE>  CONSTANTS: lc_id            TYPE tdid       VALUE &apos;ST&apos;,                         &quot; Text ID</FPCLINE>
      <FPCLINE>             lc_en            TYPE spras      VALUE &apos;E&apos;,                          &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_de            TYPE spras      VALUE &apos;D&apos;,                          &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_es            TYPE spras      VALUE &apos;S&apos;,                          &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_fr            TYPE spras      VALUE &apos;F&apos;,                          &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_2030          TYPE dzbukr     VALUE &apos;2030&apos;,                       &quot; Paying company code</FPCLINE>
      <FPCLINE>             lc_2032          TYPE dzbukr     VALUE &apos;2032&apos;,                       &quot; Paying company code</FPCLINE>
      <FPCLINE>             lc_name          TYPE tdobname   VALUE &apos;ZOTC0101_FOOTER&apos;,            &quot; Name</FPCLINE>
      <FPCLINE>             lc_name_ger_dia  TYPE tdobname   VALUE &apos;ZOTC0101_FOOTER_GERMAN_DIA&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_name_ger_bio  TYPE tdobname   VALUE &apos;ZOTC0101_FOOTER_GERMAN_BIO&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_text          TYPE tdobject   VALUE &apos;TEXT&apos;.                       &quot; Texts: Application Object</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch the customer maintained language</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Populate footer for Spanish , France &amp; German</FPCLINE>
      <FPCLINE>*&amp;--First check for customer language, if not fall back on English</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF gv_spras NE lc_de.</FPCLINE>
      <FPCLINE>    lv_name = lc_name.</FPCLINE>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF gv_spras NE lc_de</FPCLINE>
      <FPCLINE>    IF fp_reguh-zbukr = lc_2032.</FPCLINE>
      <FPCLINE>      lv_name = lc_name_ger_dia.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ELSEIF fp_reguh-zbukr = lc_2030.</FPCLINE>
      <FPCLINE>      lv_name = lc_name_ger_bio.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF fp_reguh-zbukr = lc_2032</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF gv_spras NE lc_de</FPCLINE>
      <FPCLINE>*&amp;--Fill the footer details based on the different standard text.</FPCLINE>
      <FPCLINE>  IF lv_name IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    PERFORM f_fill_footer_details USING gv_spras</FPCLINE>
      <FPCLINE>                                        lv_name.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF lv_name IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_populate_footer</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_fill_footer_details</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>* Get footer details</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_SPRAS    Customer language Key                            *</FPCLINE>
      <FPCLINE>*      --&gt;FP_NAME    Standard Text name                                *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;---Fill the footer details based on SPRAS and Standard Text name</FPCLINE>
      <FPCLINE>FORM f_fill_footer_details USING fp_spras</FPCLINE>
      <FPCLINE>                                 fp_name.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local data declarations</FPCLINE>
      <FPCLINE>  DATA:  li_footer       TYPE STANDARD TABLE OF  tline INITIAL SIZE 0,    &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE>         lwa_imessage    TYPE  solisti1,                                  &quot;work area imessage</FPCLINE>
      <FPCLINE>         lwa_footer      TYPE  tline,                                     &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE>         li_message_text TYPE STANDARD TABLE OF  solisti1 INITIAL SIZE 0. &quot;Local ITAB</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Constants</FPCLINE>
      <FPCLINE>  CONSTANTS: lc_id            TYPE tdid       VALUE &apos;ST&apos;,   &quot; Text ID</FPCLINE>
      <FPCLINE>             lc_en            TYPE spras      VALUE &apos;E&apos;,    &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_text          TYPE tdobject   VALUE &apos;TEXT&apos;. &quot; Texts: Application Object</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Check for the customer language</FPCLINE>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      client                  = sy-mandt</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras &quot;gv_langu</FPCLINE>
      <FPCLINE>      name                    = fp_name</FPCLINE>
      <FPCLINE>      object                  = lc_text</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_footer</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF li_footer[] IS NOT INITIAL.</FPCLINE>
      <FPCLINE>      READ TABLE li_footer INTO lwa_footer INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        gv_footer1 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_footer INTO lwa_footer INDEX 2.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        gv_footer2 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_footer INTO lwa_footer INDEX 3.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        gv_footer3 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_footer INTO lwa_footer INDEX 4.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        gv_footer4 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_footer INTO lwa_footer INDEX 5.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        gv_footer5 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF li_footer[] IS NOT INITIAL</FPCLINE>
      <FPCLINE>*&amp;--If customer language is not maintained, fall back would be English</FPCLINE>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        client                  = sy-mandt</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_en</FPCLINE>
      <FPCLINE>        name                    = fp_name</FPCLINE>
      <FPCLINE>        object                  = lc_text</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_footer</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      IF li_footer[] IS NOT INITIAL.</FPCLINE>
      <FPCLINE>        READ TABLE li_footer INTO lwa_footer INDEX 1.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          gv_footer1 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        READ TABLE li_footer INTO lwa_footer INDEX 2.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          gv_footer2 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        READ TABLE li_footer INTO lwa_footer INDEX 3.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          gv_footer3 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        READ TABLE li_footer INTO lwa_footer INDEX 4.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          gv_footer4 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        READ TABLE li_footer INTO lwa_footer INDEX 5.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          gv_footer5 = lwa_footer-tdline.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ENDIF. &quot; IF li_footer[] IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>ENDFORM. &quot;f_fill_footer_details</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_fetch_data</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*  Fetch data from REGUH</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_FPAYH    Payment medium: Payment data                      *</FPCLINE>
      <FPCLINE>*      &lt;--FP_REGUH    Settlement data from payment program              *</FPCLINE>
      <FPCLINE>*      &lt;--FP_I_REGUP  Payment medium: Payment data                     *</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_fetch_data USING    fp_fpayh   TYPE fpayh       &quot; Payment medium: Payment data</FPCLINE>
      <FPCLINE>                  CHANGING fp_reguh   TYPE ty_reguh    &quot;Settlement data from payment program</FPCLINE>
      <FPCLINE>                           fp_i_regup TYPE ty_t_regup. &quot; Payment medium: Payment data</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>  IF fp_fpayh IS NOT INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    SELECT  laufd &quot; Date on Which the Program Is to Be Run</FPCLINE>
      <FPCLINE>            laufi &quot; Additional Identification</FPCLINE>
      <FPCLINE>            xvorl &quot; Indicator: Only Proposal Run?</FPCLINE>
      <FPCLINE>            zbukr &quot; Paying company code</FPCLINE>
      <FPCLINE>            kunnr &quot; Customer Number</FPCLINE>
      <FPCLINE>            waers &quot; Currency key</FPCLINE>
      <FPCLINE>            name1 &quot; Name 1</FPCLINE>
      <FPCLINE>            land1 &quot; Country Key</FPCLINE>
      <FPCLINE>            adrnr &quot; Address number</FPCLINE>
      <FPCLINE>            ziban &quot; IBAN of the Payee</FPCLINE>
      <FPCLINE>            mguid &quot; SEPA Mandate: GUID of Mandate</FPCLINE>
      <FPCLINE>      FROM reguh INTO fp_reguh</FPCLINE>
      <FPCLINE>      UP TO 1 ROWS</FPCLINE>
      <FPCLINE>      WHERE laufd = fp_fpayh-laufd</FPCLINE>
      <FPCLINE>       AND  laufi = fp_fpayh-laufi</FPCLINE>
      <FPCLINE>      AND   xvorl = space</FPCLINE>
      <FPCLINE>      AND   kunnr = fp_fpayh-gpa1r.</FPCLINE>
      <FPCLINE>    ENDSELECT.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--Fetch item data</FPCLINE>
      <FPCLINE>      SELECT laufd &quot; Date on Which the Program Is to Be Run</FPCLINE>
      <FPCLINE>             laufi &quot; Additional Identification</FPCLINE>
      <FPCLINE>             xvorl &quot; Indicator: Only Proposal Run?</FPCLINE>
      <FPCLINE>             belnr &quot; Accounting Document Number</FPCLINE>
      <FPCLINE>             xblnr &quot; Reference Document Number</FPCLINE>
      <FPCLINE>             waers &quot; Currency Key</FPCLINE>
      <FPCLINE>             bldat &quot; Document Date in Document</FPCLINE>
      <FPCLINE>             shkzg &quot; Debit/Credit Indicator</FPCLINE>
      <FPCLINE>             wrbtr &quot; Amount in Document Currency</FPCLINE>
      <FPCLINE>             sknto &quot; Cash Discount Amount in Local Currency</FPCLINE>
      <FPCLINE>        FROM regup INTO TABLE fp_i_regup</FPCLINE>
      <FPCLINE>        WHERE laufd  =  fp_reguh-laufd</FPCLINE>
      <FPCLINE>        AND   laufi  =  fp_reguh-laufi</FPCLINE>
      <FPCLINE>        AND   xvorl  = space</FPCLINE>
      <FPCLINE>        AND   kunnr  = fp_reguh-kunnr.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--do nothing</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF fp_fpayh IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_fetch_data</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_fetch_cust_lang</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Fetch customer language</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_REGUH   Settlement data from payment program              *</FPCLINE>
      <FPCLINE>*      &lt;--FP_SPRAS   LAnguage Key</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_fetch_cust_lang USING    fp_reguh TYPE ty_reguh &quot;Settlement data from payment program</FPCLINE>
      <FPCLINE>                       CHANGING fp_spras TYPE spras.   &quot; Language Key</FPCLINE>
      <FPCLINE>*&amp;--Local Constants</FPCLINE>
      <FPCLINE>  CONSTANTS:</FPCLINE>
      <FPCLINE>    BEGIN OF lc_lang,</FPCLINE>
      <FPCLINE>      french  TYPE spras VALUE &apos;F&apos;, &quot; Language Key</FPCLINE>
      <FPCLINE>      spanish TYPE spras VALUE &apos;S&apos;, &quot; Language Key</FPCLINE>
      <FPCLINE>      german  TYPE spras VALUE &apos;D&apos;, &quot; Language Key</FPCLINE>
      <FPCLINE>      default TYPE spras VALUE &apos;E&apos;, &quot; Language Key</FPCLINE>
      <FPCLINE>    END OF lc_lang.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch the customer maintained language</FPCLINE>
      <FPCLINE>  SELECT SINGLE spras FROM kna1 INTO fp_spras WHERE kunnr = fp_reguh-kunnr.</FPCLINE>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>*&amp;--do nothing</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--If any of the three customer languages are not maintained, fall back on English.</FPCLINE>
      <FPCLINE>  IF NOT ( fp_spras EQ lc_lang-french  OR</FPCLINE>
      <FPCLINE>           fp_spras EQ lc_lang-spanish OR</FPCLINE>
      <FPCLINE>           fp_spras EQ lc_lang-german ).</FPCLINE>
      <FPCLINE>*  If Language not maintained then print in English</FPCLINE>
      <FPCLINE>    fp_spras = lc_lang-default.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF NOT ( fp_spras EQ lc_lang-french OR</FPCLINE>
      <FPCLINE>ENDFORM. &quot;f_fetch_cust_lang</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_populate_item_text</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*  Fetch Stadard text for labels</FPCLINE>
      <FPCLINE>*  --&gt; FP_SPRAS        Language Key</FPCLINE>
      <FPCLINE>*  &lt;-- FP_INVOICE     Label</FPCLINE>
      <FPCLINE>*   &lt;--FP_PO          Label</FPCLINE>
      <FPCLINE>*   &lt;--FP_INVDATE     Label</FPCLINE>
      <FPCLINE>*   &lt;--FP_DISC        Label</FPCLINE>
      <FPCLINE>*   &lt;--FP_CURR        Label</FPCLINE>
      <FPCLINE>*   &lt;--FP_GRAMT       Label</FPCLINE>
      <FPCLINE>*   &lt;--FP_DD          Label</FPCLINE>
      <FPCLINE>*    &lt;--FP_PAGE_NO    Label</FPCLINE>
      <FPCLINE>*     &lt;-FP_PAY_DATE   Label</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_populate_item_text  USING     fp_spras TYPE spras &quot; Language Key</FPCLINE>
      <FPCLINE>                           CHANGING fp_invoice TYPE string</FPCLINE>
      <FPCLINE>                                    fp_po      TYPE string</FPCLINE>
      <FPCLINE>                                    fp_invdate TYPE string</FPCLINE>
      <FPCLINE>                                    fp_disc    TYPE string</FPCLINE>
      <FPCLINE>                                    fp_curr    TYPE string</FPCLINE>
      <FPCLINE>                                    fp_gramt   TYPE string</FPCLINE>
      <FPCLINE>                                    fp_dd      TYPE string</FPCLINE>
      <FPCLINE>                                    fp_page_no TYPE string</FPCLINE>
      <FPCLINE>                                    fp_pay_date TYPE string.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  DATA: li_lines        TYPE STANDARD TABLE OF tline INITIAL SIZE 0, &quot;SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        lwa_lines       TYPE tline.                                  &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>  CONSTANTS: lc_inv       TYPE tdobname VALUE &apos;ZOTC0101_INVOICE&apos;,  &quot; Name</FPCLINE>
      <FPCLINE>             lc_po        TYPE tdobname VALUE &apos;ZOTC0101_PONUM&apos;,    &quot; Name</FPCLINE>
      <FPCLINE>             lc_invdate   TYPE tdobname VALUE &apos;ZOTC0101_INVDATE&apos;,  &quot; Name</FPCLINE>
      <FPCLINE>             lc_disc      TYPE tdobname VALUE &apos;ZOTC0101_CASHDISC&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_curr      TYPE tdobname VALUE &apos;ZOTC0101_CURR&apos;,     &quot; Name</FPCLINE>
      <FPCLINE>             lc_gramt     TYPE tdobname VALUE &apos;ZOTC0101_GROSSAMT&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_paydate   TYPE tdobname VALUE &apos;ZOTC0101_PMT_DATE&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_dd        TYPE tdobname VALUE &apos;ZOTC0101_DD&apos;,       &quot; Name</FPCLINE>
      <FPCLINE>             lc_page      TYPE tdobname VALUE &apos;ZOTC0101_PAGE&apos;,     &quot; Name</FPCLINE>
      <FPCLINE>             lc_id        TYPE tdid     VALUE &apos;ST&apos;,                &quot; Material-sales text</FPCLINE>
      <FPCLINE>             lc_object    TYPE tdobject VALUE &apos;TEXT&apos;,              &quot; Order item text</FPCLINE>
      <FPCLINE>             lc_english   TYPE spras    VALUE &apos;E&apos;.                 &quot; Language Key</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>*&amp;--First check for customer maintained language, if not found,</FPCLINE>
      <FPCLINE>*--fall back would be on English.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Invoice label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Call Function module to fetch the label form name.</FPCLINE>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_inv</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_invoice = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_inv</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_invoice = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>*&amp;--PO Number label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_po</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_po = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_po</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_po = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Invoice date label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_invdate</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_invdate = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_invdate</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_invdate = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Cash Disc label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_disc</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_disc = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_disc</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_disc = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Currency label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_curr</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_curr = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_curr</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_curr = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Gross Amt label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_gramt</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_gramt = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_gramt</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_gramt = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--DD label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_dd</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_dd = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      CONDENSE fp_dd.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_dd</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_dd = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>*&amp;--Page Number</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_page</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_page_no = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_page</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_page_no = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Payment date</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>    EXPORTING</FPCLINE>
      <FPCLINE>      id                      = lc_id</FPCLINE>
      <FPCLINE>      language                = fp_spras</FPCLINE>
      <FPCLINE>      name                    = lc_paydate</FPCLINE>
      <FPCLINE>      object                  = lc_object</FPCLINE>
      <FPCLINE>    TABLES</FPCLINE>
      <FPCLINE>      lines                   = li_lines</FPCLINE>
      <FPCLINE>    EXCEPTIONS</FPCLINE>
      <FPCLINE>      id                      = 1</FPCLINE>
      <FPCLINE>      language                = 2</FPCLINE>
      <FPCLINE>      name                    = 3</FPCLINE>
      <FPCLINE>      not_found               = 4</FPCLINE>
      <FPCLINE>      object                  = 5</FPCLINE>
      <FPCLINE>      reference_check         = 6</FPCLINE>
      <FPCLINE>      wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>      OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>      fp_pay_date = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = lc_english</FPCLINE>
      <FPCLINE>        name                    = lc_paydate</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_pay_date = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_populate_item_text</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_today_date</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*   Fetch today&apos;s date</FPCLINE>
      <FPCLINE>*    ---&gt;FP_SPRAS  Language Key</FPCLINE>
      <FPCLINE>*    &lt;--FP_TODATE  Today&apos;s Date</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_today_date  USING    fp_spras  TYPE spras   &quot; Language Key</FPCLINE>
      <FPCLINE>                   CHANGING fp_todate TYPE char20. &quot; Todate of type CHAR20</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  DATA: lv_date TYPE sy-datum,       &quot; Current Date of Application Server</FPCLINE>
      <FPCLINE>        lv_month_name TYPE t247-ltx. &quot; Month long text</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Date format should be mmmm d,yyyy format</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  lv_date = sy-datum.</FPCLINE>
      <FPCLINE>*&amp;--Month should be fetched based on the customer language</FPCLINE>
      <FPCLINE>  SELECT SINGLE ltx FROM t247 &quot; Month name and short text</FPCLINE>
      <FPCLINE>  INTO lv_month_name</FPCLINE>
      <FPCLINE>  WHERE spras = fp_spras</FPCLINE>
      <FPCLINE>  AND mnr = sy-datum+4(2).</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*  CONCATENATE lv_month_name sy-datum+6(2) &apos;,&apos; sy-datum(4)</FPCLINE>
      <FPCLINE>  CONCATENATE sy-datum+6(2) lv_month_name sy-datum(4)</FPCLINE>
      <FPCLINE>  INTO fp_todate SEPARATED BY space.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_today_date</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*&amp;      Form  f_credit_identifier</FPCLINE>
      <FPCLINE>*&amp;---------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*    Fetch Creditor Identifier</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>*      --&gt;FP_REGUH              Settlement data from payment program   *</FPCLINE>
      <FPCLINE>*      --&gt;FP_SPRAS               Language Key</FPCLINE>
      <FPCLINE>*      &lt;--FP_IDENTIFIER         Creditor Identification Number</FPCLINE>
      <FPCLINE>*      &lt;--FP_LABEL_IDENTIFIER    Label</FPCLINE>
      <FPCLINE>*----------------------------------------------------------------------*</FPCLINE>
      <FPCLINE>FORM f_credit_identifier USING   fp_reguh            TYPE ty_reguh   &quot;Settlement data from payment program</FPCLINE>
      <FPCLINE>                                 fp_spras            TYPE spras      &quot; Language Key</FPCLINE>
      <FPCLINE>                        CHANGING fp_identifier       TYPE sepa_crdid &quot; Creditor Identification Number</FPCLINE>
      <FPCLINE>                                 fp_label_identifier TYPE string.    &quot;Label</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Data Declartions</FPCLINE>
      <FPCLINE>  DATA: li_lines        TYPE STANDARD TABLE OF tline INITIAL SIZE 0, &quot;SAPscript: Text Lines</FPCLINE>
      <FPCLINE>        lwa_lines       TYPE tline.                                  &quot; SAPscript: Text Lines</FPCLINE>
      <FPCLINE/>
      <FPCLINE>*&amp;--Local Constants</FPCLINE>
      <FPCLINE>  CONSTANTS: lc_identifier      TYPE tdobname VALUE &apos;ZOTC0101_CRED_IDENTIFIER&apos;,      &quot; Name</FPCLINE>
      <FPCLINE>             lc_identifier_2030 TYPE tdobname VALUE &apos;ZOTC0101_CRED_IDENTIFIER_2030&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_identifier_2032 TYPE tdobname VALUE &apos;ZOTC0101_CRED_IDENTIFIER_2032&apos;, &quot; Name</FPCLINE>
      <FPCLINE>             lc_id              TYPE tdid     VALUE &apos;ST&apos;,                            &quot; Material-sales text</FPCLINE>
      <FPCLINE>             lc_2030            TYPE dzbukr   VALUE &apos;2030&apos;,                          &quot; CC 2030 for Germany</FPCLINE>
      <FPCLINE>             lc_2032            TYPE dzbukr   VALUE &apos;2032&apos;,                          &quot; CC 2032 for Germany</FPCLINE>
      <FPCLINE>             lc_object          TYPE tdobject VALUE &apos;TEXT&apos;,                          &quot; Order item text</FPCLINE>
      <FPCLINE>             lc_de              TYPE spras    VALUE &apos;D&apos;,                             &quot; Language Key</FPCLINE>
      <FPCLINE>             lc_en              TYPE spras    VALUE &apos;E&apos;.                             &quot; Language Key</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>*&amp;--Fetch creditor identifier</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  SELECT SINGLE sepa_rec_crdid FROM t042b &quot; Details on the company codes that must pay</FPCLINE>
      <FPCLINE>     INTO fp_identifier WHERE zbukr = fp_reguh-zbukr.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF sy-subrc IS NOT INITIAL.</FPCLINE>
      <FPCLINE>    CLEAR fp_identifier.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF sy-subrc IS NOT INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  IF fp_spras NE lc_de.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>      EXPORTING</FPCLINE>
      <FPCLINE>        id                      = lc_id</FPCLINE>
      <FPCLINE>        language                = fp_spras</FPCLINE>
      <FPCLINE>        name                    = lc_identifier</FPCLINE>
      <FPCLINE>        object                  = lc_object</FPCLINE>
      <FPCLINE>      TABLES</FPCLINE>
      <FPCLINE>        lines                   = li_lines</FPCLINE>
      <FPCLINE>      EXCEPTIONS</FPCLINE>
      <FPCLINE>        id                      = 1</FPCLINE>
      <FPCLINE>        language                = 2</FPCLINE>
      <FPCLINE>        name                    = 3</FPCLINE>
      <FPCLINE>        not_found               = 4</FPCLINE>
      <FPCLINE>        object                  = 5</FPCLINE>
      <FPCLINE>        reference_check         = 6</FPCLINE>
      <FPCLINE>        wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>        OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>        fp_label_identifier = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>      CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>        EXPORTING</FPCLINE>
      <FPCLINE>          id                      = lc_id</FPCLINE>
      <FPCLINE>          language                = lc_en</FPCLINE>
      <FPCLINE>          name                    = lc_identifier</FPCLINE>
      <FPCLINE>          object                  = lc_object</FPCLINE>
      <FPCLINE>        TABLES</FPCLINE>
      <FPCLINE>          lines                   = li_lines</FPCLINE>
      <FPCLINE>        EXCEPTIONS</FPCLINE>
      <FPCLINE>          id                      = 1</FPCLINE>
      <FPCLINE>          language                = 2</FPCLINE>
      <FPCLINE>          name                    = 3</FPCLINE>
      <FPCLINE>          not_found               = 4</FPCLINE>
      <FPCLINE>          object                  = 5</FPCLINE>
      <FPCLINE>          reference_check         = 6</FPCLINE>
      <FPCLINE>          wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>          OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          fp_label_identifier = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ELSE. &quot; ELSE -&gt; IF fp_spras NE lc_de</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    IF fp_reguh-zbukr = lc_2032.</FPCLINE>
      <FPCLINE>      CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>        EXPORTING</FPCLINE>
      <FPCLINE>          id                      = lc_id</FPCLINE>
      <FPCLINE>          language                = fp_spras</FPCLINE>
      <FPCLINE>          name                    = lc_identifier_2032</FPCLINE>
      <FPCLINE>          object                  = lc_object</FPCLINE>
      <FPCLINE>        TABLES</FPCLINE>
      <FPCLINE>          lines                   = li_lines</FPCLINE>
      <FPCLINE>        EXCEPTIONS</FPCLINE>
      <FPCLINE>          id                      = 1</FPCLINE>
      <FPCLINE>          language                = 2</FPCLINE>
      <FPCLINE>          name                    = 3</FPCLINE>
      <FPCLINE>          not_found               = 4</FPCLINE>
      <FPCLINE>          object                  = 5</FPCLINE>
      <FPCLINE>          reference_check         = 6</FPCLINE>
      <FPCLINE>          wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>          OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          fp_label_identifier = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        CLEAR lwa_lines.</FPCLINE>
      <FPCLINE>      ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>        CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>          EXPORTING</FPCLINE>
      <FPCLINE>            id                      = lc_id</FPCLINE>
      <FPCLINE>            language                = lc_en</FPCLINE>
      <FPCLINE>            name                    = lc_identifier</FPCLINE>
      <FPCLINE>            object                  = lc_object</FPCLINE>
      <FPCLINE>          TABLES</FPCLINE>
      <FPCLINE>            lines                   = li_lines</FPCLINE>
      <FPCLINE>          EXCEPTIONS</FPCLINE>
      <FPCLINE>            id                      = 1</FPCLINE>
      <FPCLINE>            language                = 2</FPCLINE>
      <FPCLINE>            name                    = 3</FPCLINE>
      <FPCLINE>            not_found               = 4</FPCLINE>
      <FPCLINE>            object                  = 5</FPCLINE>
      <FPCLINE>            reference_check         = 6</FPCLINE>
      <FPCLINE>            wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>            OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>          READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            fp_label_identifier = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ELSE. &quot; ELSE -&gt; IF fp_reguh-zbukr = lc_2032</FPCLINE>
      <FPCLINE>      IF fp_reguh-zbukr = lc_2030.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>          EXPORTING</FPCLINE>
      <FPCLINE>            id                      = lc_id</FPCLINE>
      <FPCLINE>            language                = fp_spras</FPCLINE>
      <FPCLINE>            name                    = lc_identifier_2030</FPCLINE>
      <FPCLINE>            object                  = lc_object</FPCLINE>
      <FPCLINE>          TABLES</FPCLINE>
      <FPCLINE>            lines                   = li_lines</FPCLINE>
      <FPCLINE>          EXCEPTIONS</FPCLINE>
      <FPCLINE>            id                      = 1</FPCLINE>
      <FPCLINE>            language                = 2</FPCLINE>
      <FPCLINE>            name                    = 3</FPCLINE>
      <FPCLINE>            not_found               = 4</FPCLINE>
      <FPCLINE>            object                  = 5</FPCLINE>
      <FPCLINE>            reference_check         = 6</FPCLINE>
      <FPCLINE>            wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>            OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            fp_label_identifier = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ELSE. &quot; ELSE -&gt; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE>          CALL FUNCTION &apos;READ_TEXT&apos;</FPCLINE>
      <FPCLINE>            EXPORTING</FPCLINE>
      <FPCLINE>              id                      = lc_id</FPCLINE>
      <FPCLINE>              language                = lc_en</FPCLINE>
      <FPCLINE>              name                    = lc_identifier</FPCLINE>
      <FPCLINE>              object                  = lc_object</FPCLINE>
      <FPCLINE>            TABLES</FPCLINE>
      <FPCLINE>              lines                   = li_lines</FPCLINE>
      <FPCLINE>            EXCEPTIONS</FPCLINE>
      <FPCLINE>              id                      = 1</FPCLINE>
      <FPCLINE>              language                = 2</FPCLINE>
      <FPCLINE>              name                    = 3</FPCLINE>
      <FPCLINE>              not_found               = 4</FPCLINE>
      <FPCLINE>              object                  = 5</FPCLINE>
      <FPCLINE>              reference_check         = 6</FPCLINE>
      <FPCLINE>              wrong_access_to_archive = 7</FPCLINE>
      <FPCLINE>              OTHERS                  = 8.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>            READ TABLE li_lines INTO lwa_lines INDEX 1.</FPCLINE>
      <FPCLINE>            IF sy-subrc IS INITIAL.</FPCLINE>
      <FPCLINE>              fp_label_identifier = lwa_lines-tdline.</FPCLINE>
      <FPCLINE>            ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>            CLEAR lwa_lines.</FPCLINE>
      <FPCLINE/>
      <FPCLINE>          ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>        ENDIF. &quot; IF sy-subrc IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>      ENDIF. &quot; IF fp_reguh-zbukr = lc_2030</FPCLINE>
      <FPCLINE/>
      <FPCLINE>    ENDIF. &quot; IF fp_reguh-zbukr = lc_2032</FPCLINE>
      <FPCLINE/>
      <FPCLINE>  ENDIF. &quot; IF fp_spras NE lc_de</FPCLINE>
      <FPCLINE/>
      <FPCLINE/>
      <FPCLINE>  IF fp_identifier IS INITIAL.</FPCLINE>
      <FPCLINE>    CLEAR fp_label_identifier.</FPCLINE>
      <FPCLINE>  ENDIF. &quot; IF fp_identifier IS INITIAL</FPCLINE>
      <FPCLINE/>
      <FPCLINE>ENDFORM. &quot;f_credit_identifier</FPCLINE>
     </FORMS>
    </CL_FP_CODING>
   </cls:CL_FP_CODING>
  </asx:heap>
 </asx:abap>
</abapGit>
